{
	"info": {
		"_postman_id": "64920073-4f95-484e-8e39-b024bd591499",
		"name": "Wowza Streaming Cloud REST API 1.5 Beta",
		"description": "\n# About the REST API\n___\nThe Wowza Streaming Cloud<sup>TM</sup> REST API allows you to add live streaming and playback functionality to your applications. It offers complete programmatic control over live streams, transcoders, stream sources, and stream targets. Anything you can do in the Wowza Streaming Cloud UI can also be achieved by making HTTP-based requests to cloud-based servers through the REST API.\n\n## CORS\nThe Wowza Streaming Cloud REST API features *cross-origin resource sharing*, or CORS.\nCORS is a [W3C specification](https://www.w3.org/TR/cors/) that provides headers in HTTP requests to enable a web server to safely make a network request to another domain.\n\n## Limits\nIn order to protect shared resources, the Wowza Streaming Cloud REST API is subject to limits. For details, see [Wowza Streaming Cloud REST API limits](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-limits).\n\n## Versions\nThe Wowza Streaming Cloud REST API is periodically versioned. Minor updates are iterated using sequential dot numbers; major versions are iterated using sequential whole numbers. For details, see the [Wowza Streaming Cloud REST API deprecation policy](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api-deprecation-policy).<br/><br/>Each version is one of these types:\n\n  * **Beta** The beta version contains everything that's in the current version as well as some features and functionality that are still in development. These work-in-progress features aren't fully tested and are subject to change. When we're done testing, we'll promote the beta version to the current version and then create a new beta with new features. You're free to use the beta version for testing and evaluation, but beta versions aren't intended for use in production environments and we caution against using a beta in production. There is only one beta version available at any time.\n  * **Current** The current version offers the most complete, up-to-date, tested, and stable code base. We strongly recommend using the current version in your production environment. There is only one current version available at any time.\n  * **Supported** A supported version was current at one time but has been replaced by a newer version of the API. Supported versions don't have the newest features, and may contain features or functions that are outdated and don't offer the most efficient methods for accomplishing your streaming goals. If you're using a supported version, we recommend that you upgrade to the current version, as supported versions will ultimately be deprecated.\n  * **Deprecated** A deprecated version is out-of-date and isn't guaranteed to work in production environments. If you're using a deprecated version, update to the current version at your earliest convenience.\n  * **Sunset** A sunset version is no longer accessible. This includes all relevant documentation.\n\n### Query for version status\nYou can use the following GET request to fetch the current status for versions of the REST API.\n\n```bash\ncurl -X GET \\\n-H 'wsc-api-key: ${WSC_API_KEY}' \\\n-H 'wsc-access-key: ${WSC_ACCESS_KEY}' \\\n'https://api.cloud.wowza.com/api/versions'\n```\n\nThe response should look something like this, but it will differ according to current version status. Note that the beta version is not included in the response.\n```bash\n{\n    \"1.3\": {\n        \"status\": \"current\",\n        \"base_uri\": \"/api/v1.5\"\n    },\n    ...\n}\n```\n\n# Documentation\n___\n## Reference doc\nThis reference documentation provides details about the operations, parameters, and request and reponse schemas for every resource and endpoint in the Wowza Streaming Cloud REST API.\n\nSamples appear in the right column. Sample requests are presented in cURL (Shell) and JavaScript; some samples also include just the JSON object. Response samples are all JSON. Examples in cURL use environment variables so you can easily copy and paste them. To learn more, see [Using cURL](https://wowza.com/docs/how-to-use-the-wowza-streaming-cloud-rest-api#curl).\n\nReference documentation is available for every version of the API. Use the **Version** menu in the banner at the top of the page to access the reference doc for a different version of the API.\n\n## Release notes\nRelease notes are also available for each version. Release notes detail additions, changes, and deletions for each version. Click **Switch to release notes for this version** in the banner at the top of the page to switch from the reference documentation to the release notes. Click **Switch to documentation for this version** to return to this content.\n\n## Technical articles\nFor additional documentation, including more detailed examples on using the Wowza Streaming Cloud REST API, see our [library of Wowza Streaming Cloud REST API technical articles](https://www.wowza.com/docs/wowza-streaming-cloud-rest-api).\n\n# Query requirements\n___\nThe Wowza Streaming Cloud REST API uses HTTP requests to retrieve data from cloud-based servers. Requests must contain proper JSON, three authentication keys, and the correct version number as the base path.\n\n## Use JSON\nThe Wowza Streaming Cloud REST API uses the [JSON API specification](http://jsonapi.org/format/) to request and return data. This means requests must include the header `Content-Type: application/json` and must include a single resource object in JSON format as primary data.\n\nResponses include HTTP status codes that indicate whether the query was successful. If there was an error, a description explains the problem so that you can fix it and try again.\n\n## Authenticate\nRequests to the Wowza Streaming Cloud REST API must include headers for authentication. <br /><br />For production environments, use the more secure HMAC method of authentication. Headers for HMAC include an access key, a timestamp, and a signature generated using the HMAC-256-Hexdigest algorithm.<br /><br />\nFor HMAC authentication, use the `wsc-access-key`, `wsc-timestamp`, and `wsc-signature` headers to authenticate requests, like this (in cURL):\n\n```bash\ncurl -H 'wsc-access-key: [64-character-access-key]' \\\n     -H 'wsc-timestamp: [Unix-epoch-timestamp]' \\\n     -H 'wsc-signature: [signature-generated-from-HMAC-256-Hexdigest-algorithm]'\n```\nFor initial testing only, you may use your API key and access key as authentication headers. Each key is a 64-character alphanumeric string that you can find on the **API Access** page in Wowza Streaming Cloud. <br /><br />\nFor API key and access key authentication, use the `wsc-api-key` and `wsc-access-key` headers to authenticate requests, like this (in cURL):\n\n```bash\ncurl -H 'wsc-api-key: [64-character-api-key]' \\\n     -H 'wsc-access-key: [64-character-access-key]'\n```\nSee [Authentication](https://wowza.com/docs/how-to-use-the-wowza-streaming-cloud-rest-api#authentication) for more detailed information about authenticating API requests.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Specify a version\nYou must specify the version of the Wowza Streaming Cloud REST API you're using for the base path of your request. Use the version number or `beta`, as in\n```\nhttps://api.cloud.wowza.com/api/v1.5/live_streams\n```\nor\n```\nhttps://api.cloud.wowza.com/api/beta/live_streams\n```\n## Example query\nHere is a complete example POST request, in cURL, with proper JSON syntax, headers, HMAC authentication, and version information:\n```bash\ncurl -X POST \\\n-H 'wsc-access-key: [64-character-access-key]' \\\n-H 'wsc-timestamp: [timestamp]' \\\n-H 'wsc-signature: [generated-signature]' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"live_stream\": {\n      \"name\": \"My live Stream\",\n      \"...\": \"...\"\n    }\n  }' 'https://api.cloud.wowza.com/api/[version]/live_streams'\n```\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "live streams",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Fetch a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation shows the details of a specific live stream."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"aspect_ratio_height\": 1080,\n  \"aspect_ratio_width\": 1920,\n  \"billing_mode\": \"pay_as_you_go\",\n  \"broadcast_location\": \"us_west_california\",\n  \"closed_caption_type\": \"cea\",\n  \"connection_code\": \"0e15cb\",\n  \"connection_code_expires_at\": \"2020-11-28T20:07:15.747Z\",\n  \"created_at\": \"2020-01-26T20:07:15.747Z\",\n  \"delivery_method\": \"push\",\n  \"delivery_protocols\": [\n   \"rtmp\",\n   \"rtsp\",\n   \"wowz\"\n  ],\n  \"delivery_type\": \"multi-bitrate\",\n  \"direct_playback_urls\": [\n   {\n    \"rtmp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"rtsp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"wowz\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   }\n  ],\n  \"encoder\": \"wowza_streaming_engine\",\n  \"hosted_page\": true,\n  \"hosted_page_description\": \"My Hosted Page Description\",\n  \"hosted_page_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/hosted_page_logo_image/23424/5bad28.jpg\",\n  \"hosted_page_sharing_icons\": true,\n  \"hosted_page_title\": \"My Hosted Page\",\n  \"hosted_page_url\": \"https://player.cloud.wowza.com/hosted/e8dk5bf6/player.html\",\n  \"name\": \"My PAYG Transcoded WSE Live Stream\",\n  \"player_countdown\": true,\n  \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n  \"player_embed_code\": \"<div id='wowza_player'></div><script id='player_embed' src='//player.cloud.wowza.com/hosted/e8dk5bf6/wowza.js' type='text/javascript'></script>\",\n  \"player_hls_playback_url\": \"http://wowza-lh.akamaihd.net/z/d24b8a50_1@123456/master.m3u8\",\n  \"player_id\": \"kwb6pwnv\",\n  \"player_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/logo_image/23424/5bad28.jpg\",\n  \"player_logo_position\": \"top-right\",\n  \"player_responsive\": false,\n  \"player_type\": \"original_html5\",\n  \"player_video_poster_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/video_poster_image/23424/5bad28.jpg\",\n  \"player_width\": 640,\n  \"recording\": true,\n  \"stream_source_id\": \"5skrfpyf\",\n  \"stream_targets\": [\n   {},\n   {}\n  ],\n  \"target_delivery_protocol\": \"hls-https\",\n  \"transcoder_type\": \"transcoded\",\n  \"updated_at\": \"2020-01-27T17:14:21.748Z\",\n  \"use_stream_source\": true\n }\n}"
								}
							]
						},
						{
							"name": "Update a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"live_stream\": {\n        \"name\": \"<string>\",\n        \"encoder\": \"<string>\",\n        \"aspect_ratio_width\": \"<integer>\",\n        \"aspect_ratio_height\": \"<integer>\",\n        \"closed_caption_type\": \"<string>\",\n        \"delivery_method\": \"<string>\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"disable_authentication\": \"<boolean>\",\n        \"hosted_page_description\": \"<string>\",\n        \"hosted_page_logo_image\": \"<string>\",\n        \"hosted_page_sharing_icons\": \"<boolean>\",\n        \"hosted_page_title\": \"<string>\",\n        \"password\": \"<string>\",\n        \"player_countdown\": \"<boolean>\",\n        \"player_countdown_at\": \"<dateTime>\",\n        \"player_logo_image\": \"<string>\",\n        \"player_logo_position\": \"<string>\",\n        \"player_responsive\": \"<boolean>\",\n        \"player_type\": \"<string>\",\n        \"player_video_poster_image\": \"<string>\",\n        \"player_width\": \"<integer>\",\n        \"recording\": \"<boolean>\",\n        \"remove_hosted_page_logo_image\": \"<boolean>\",\n        \"remove_player_logo_image\": \"<boolean>\",\n        \"remove_player_video_poster_image\": \"<boolean>\",\n        \"source_url\": \"<string>\",\n        \"target_delivery_protocol\": \"<string>\",\n        \"use_stream_source\": \"<boolean>\",\n        \"username\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation updates a live stream."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"disable_authentication\": false,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"disable_authentication\": false,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"disable_authentication\": false,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"disable_authentication\": false,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"disable_authentication\": false,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"aspect_ratio_height\": 1080,\n  \"aspect_ratio_width\": 1920,\n  \"billing_mode\": \"pay_as_you_go\",\n  \"broadcast_location\": \"us_west_california\",\n  \"closed_caption_type\": \"cea\",\n  \"connection_code\": \"0e15cb\",\n  \"connection_code_expires_at\": \"2020-11-28T20:07:15.747Z\",\n  \"created_at\": \"2020-01-26T20:07:15.747Z\",\n  \"delivery_method\": \"push\",\n  \"delivery_protocols\": [\n   \"rtmp\",\n   \"rtsp\",\n   \"wowz\"\n  ],\n  \"delivery_type\": \"multi-bitrate\",\n  \"direct_playback_urls\": [\n   {\n    \"rtmp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"rtsp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"wowz\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   }\n  ],\n  \"encoder\": \"wowza_streaming_engine\",\n  \"hosted_page\": true,\n  \"hosted_page_description\": \"My Hosted Page Description\",\n  \"hosted_page_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/hosted_page_logo_image/23424/5bad28.jpg\",\n  \"hosted_page_sharing_icons\": true,\n  \"hosted_page_title\": \"My Hosted Page\",\n  \"hosted_page_url\": \"https://player.cloud.wowza.com/hosted/e8dk5bf6/player.html\",\n  \"name\": \"My PAYG Transcoded WSE Live Stream\",\n  \"player_countdown\": true,\n  \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n  \"player_embed_code\": \"<div id='wowza_player'></div><script id='player_embed' src='//player.cloud.wowza.com/hosted/e8dk5bf6/wowza.js' type='text/javascript'></script>\",\n  \"player_hls_playback_url\": \"http://wowza-lh.akamaihd.net/z/d24b8a50_1@123456/master.m3u8\",\n  \"player_id\": \"kwb6pwnv\",\n  \"player_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/logo_image/23424/5bad28.jpg\",\n  \"player_logo_position\": \"top-right\",\n  \"player_responsive\": false,\n  \"player_type\": \"original_html5\",\n  \"player_video_poster_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/video_poster_image/23424/5bad28.jpg\",\n  \"player_width\": 640,\n  \"recording\": true,\n  \"stream_source_id\": \"5skrfpyf\",\n  \"stream_targets\": [\n   {},\n   {}\n  ],\n  \"target_delivery_protocol\": \"hls-https\",\n  \"transcoder_type\": \"transcoded\",\n  \"updated_at\": \"2020-01-27T17:14:21.748Z\",\n  \"use_stream_source\": true\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"disable_authentication\": false,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Delete a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation deletes a live stream, including all assigned outputs and targets."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "No Content",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Start a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id/start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id",
										"start"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation starts a live stream."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"state\": \"starting\"\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Stop a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id/stop",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id",
										"stop"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation stops a live stream."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"state\": \"stopped\"\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Reset a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id",
										"reset"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation resets a live stream."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"state\": \"resetting\"\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Regenerate the connection code for a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id/regenerate_connection_code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id",
										"regenerate_connection_code"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation regenerates the connection code of a live stream."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"connection_code\": \"0cd2e8\"\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch the thumbnail URL of a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id/thumbnail_url",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id",
										"thumbnail_url"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation shows the thumbnail URL of a started live stream."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"thumbnail_url\": \"https://cloud.wowza.com/proxy/stats/?target=10.11.12.13&app=app-79b8&stream=99b62146@130135.stream&media=json\"\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch the state of a live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation shows the current state of a live stream."
							},
							"response": [
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"ip_address\": \"0.0.0.0\",\n  \"state\": \"stopped\"\n }\n}"
								}
							]
						},
						{
							"name": "Fetch metrics for an active live stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/live_streams/:id/stats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams",
										":id",
										"stats"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{liveStreamId}}",
											"description": "The unique alphanumeric string that identifies the live stream."
										}
									]
								},
								"description": "This operation returns a hash of metrics keys, each of which identifies a status, text description, unit, and value."
							},
							"response": [
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"live_stream\": {\n  \"audio_codec\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"aac\"\n  },\n  \"bits_in_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"Kbps\",\n   \"value\": 317.3\n  },\n  \"bits_out_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"Kbps\",\n   \"value\": 856\n  },\n  \"bytes_in_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"KBps\",\n   \"value\": 317.3\n  },\n  \"bytes_out_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"KBps\",\n   \"value\": 856\n  },\n  \"configured_bytes_out_rate\": {\n   \"status\": \"warning\",\n   \"text\": \"Outbound bitrate is lower than the configured bitrate. There might be a problem with the stream targets.\",\n   \"units\": \"Kbps\",\n   \"value\": 8192\n  },\n  \"connected\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"Yes\"\n  },\n  \"frame_size\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured frame size is different from what Wowza Streaming Cloud is receiving from the source: 1280x720.\",\n   \"units\": \"\",\n   \"value\": \"1280x720\"\n  },\n  \"frame_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"FPS\",\n   \"value\": 30\n  },\n  \"height\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured height is different from what Wowza Streaming Cloud is receiving from the source: 720.\",\n   \"units\": \"px\",\n   \"value\": 720\n  },\n  \"keyframe_interval\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"GOP\",\n   \"value\": 69\n  },\n  \"stream_target_status_OUTPUTIDX_STREAMTARGETIDX\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"Active\"\n  },\n  \"unique_views\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"%\",\n   \"value\": 1030\n  },\n  \"video_codec\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"avc1\"\n  },\n  \"width\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured width is different from what Wowza Streaming Cloud is receiving from the source: 1280.\",\n   \"units\": \"px\",\n   \"value\": 1280\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/live_streams/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"live_streams",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create a live stream",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "wsc-signature",
								"value": "",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"live_stream\": {\n        \"name\": \"<string>\",\n        \"transcoder_type\": \"<string>\",\n        \"billing_mode\": \"<string>\",\n        \"broadcast_location\": \"<string>\",\n        \"encoder\": \"<string>\",\n        \"aspect_ratio_width\": \"<integer>\",\n        \"aspect_ratio_height\": \"<integer>\",\n        \"closed_caption_type\": \"<string>\",\n        \"delivery_method\": \"<string>\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"delivery_type\": \"<string>\",\n        \"disable_authentication\": \"<boolean>\",\n        \"hosted_page\": \"<boolean>\",\n        \"hosted_page_description\": \"<string>\",\n        \"hosted_page_logo_image\": \"<string>\",\n        \"hosted_page_sharing_icons\": \"<boolean>\",\n        \"hosted_page_title\": \"<string>\",\n        \"low_latency\": \"<boolean>\",\n        \"password\": \"<string>\",\n        \"player_countdown\": \"<boolean>\",\n        \"player_countdown_at\": \"<dateTime>\",\n        \"player_logo_image\": \"<string>\",\n        \"player_logo_position\": \"<string>\",\n        \"player_responsive\": \"<boolean>\",\n        \"player_type\": \"<string>\",\n        \"player_video_poster_image\": \"<string>\",\n        \"player_width\": \"<integer>\",\n        \"recording\": \"<boolean>\",\n        \"remove_hosted_page_logo_image\": \"<boolean>\",\n        \"remove_player_logo_image\": \"<boolean>\",\n        \"remove_player_video_poster_image\": \"<boolean>\",\n        \"source_url\": \"<string>\",\n        \"target_delivery_protocol\": \"<string>\",\n        \"use_stream_source\": \"<boolean>\",\n        \"username\": \"<string>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/live_streams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_streams"
							]
						},
						"description": "This operation creates a live stream."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"transcoder_type\": \"transcoded\",\n        \"billing_mode\": \"pay_as_you_go\",\n        \"broadcast_location\": \"eu_germany\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"none\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"delivery_type\": \"single-bitrate\",\n        \"disable_authentication\": false,\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"low_latency\": false,\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/live_streams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"live_stream\": {\n  \"aspect_ratio_height\": 1080,\n  \"aspect_ratio_width\": 1920,\n  \"billing_mode\": \"pay_as_you_go\",\n  \"broadcast_location\": \"us_west_california\",\n  \"closed_caption_type\": \"cea\",\n  \"connection_code\": \"0e15cb\",\n  \"connection_code_expires_at\": \"2020-11-28T20:07:15.747Z\",\n  \"created_at\": \"2020-01-26T20:07:15.747Z\",\n  \"delivery_method\": \"push\",\n  \"delivery_protocols\": [\n   \"rtmp\",\n   \"rtsp\",\n   \"wowz\"\n  ],\n  \"delivery_type\": \"multi-bitrate\",\n  \"direct_playback_urls\": [\n   {\n    \"rtmp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"rtsp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"wowz\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   }\n  ],\n  \"encoder\": \"wowza_streaming_engine\",\n  \"hosted_page\": true,\n  \"hosted_page_description\": \"My Hosted Page Description\",\n  \"hosted_page_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/hosted_page_logo_image/23424/5bad28.jpg\",\n  \"hosted_page_sharing_icons\": true,\n  \"hosted_page_title\": \"My Hosted Page\",\n  \"hosted_page_url\": \"https://player.cloud.wowza.com/hosted/e8dk5bf6/player.html\",\n  \"name\": \"My PAYG Transcoded WSE Live Stream\",\n  \"player_countdown\": true,\n  \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n  \"player_embed_code\": \"<div id='wowza_player'></div><script id='player_embed' src='//player.cloud.wowza.com/hosted/e8dk5bf6/wowza.js' type='text/javascript'></script>\",\n  \"player_hls_playback_url\": \"http://wowza-lh.akamaihd.net/z/d24b8a50_1@123456/master.m3u8\",\n  \"player_id\": \"kwb6pwnv\",\n  \"player_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/logo_image/23424/5bad28.jpg\",\n  \"player_logo_position\": \"top-right\",\n  \"player_responsive\": false,\n  \"player_type\": \"original_html5\",\n  \"player_video_poster_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/video_poster_image/23424/5bad28.jpg\",\n  \"player_width\": 640,\n  \"recording\": true,\n  \"stream_source_id\": \"5skrfpyf\",\n  \"stream_targets\": [\n   {},\n   {}\n  ],\n  \"target_delivery_protocol\": \"hls-https\",\n  \"transcoder_type\": \"transcoded\",\n  \"updated_at\": \"2020-01-27T17:14:21.748Z\",\n  \"use_stream_source\": true\n }\n}"
						},
						{
							"name": "Unprocessable Entity",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"transcoder_type\": \"transcoded\",\n        \"billing_mode\": \"pay_as_you_go\",\n        \"broadcast_location\": \"eu_germany\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"none\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"delivery_type\": \"single-bitrate\",\n        \"disable_authentication\": false,\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"low_latency\": false,\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/live_streams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"live_stream\": {\n        \"name\": \"My Live Stream\",\n        \"transcoder_type\": \"transcoded\",\n        \"billing_mode\": \"pay_as_you_go\",\n        \"broadcast_location\": \"eu_germany\",\n        \"encoder\": \"wowza_gocoder\",\n        \"aspect_ratio_width\": 1920,\n        \"aspect_ratio_height\": 1080,\n        \"closed_caption_type\": \"none\",\n        \"delivery_method\": \"push\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"delivery_type\": \"single-bitrate\",\n        \"disable_authentication\": false,\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"low_latency\": false,\n        \"password\": \"68332313\",\n        \"player_countdown\": true,\n        \"player_countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"player_logo_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_logo_position\": \"top-right\",\n        \"player_responsive\": false,\n        \"player_type\": \"wowza_player\",\n        \"player_video_poster_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"player_width\": 640,\n        \"recording\": true,\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_player_logo_image\": true,\n        \"remove_player_video_poster_image\": true,\n        \"source_url\": \"xyz.streamlock.net/vod/mp4:Movie.mov\",\n        \"target_delivery_protocol\": \"hls-https\",\n        \"use_stream_source\": false,\n        \"username\": \"client2\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/live_streams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						}
					]
				},
				{
					"name": "Fetch all live streams",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/live_streams?page={{filter_page}}&per_page={{filter_per_page}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"live_streams"
							],
							"query": [
								{
									"key": "page",
									"value": "{{filter_page}}",
									"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "per_page",
									"value": "{{filter_per_page}}",
									"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
								}
							]
						},
						"description": "This operation shows limited details for all of your live streams. For detailed information, fetch a single live stream."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/live_streams?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"live_streams\": [\n  {\n   \"name\": \"My PAYG Transcoded WSE Live Stream\",\n   \"created_at\": \"2020-01-26T20:07:15.615Z\",\n   \"updated_at\": \"2020-01-27T17:40:04.615Z\"\n  },\n  {\n   \"name\": \"My 24x7 Passthrough GoCoder Live Stream\",\n   \"created_at\": \"2020-01-26T20:07:15.615Z\",\n   \"updated_at\": \"2020-01-28T04:18:28.615Z\"\n  },\n  {\n   \"name\": \"My PAYG Transcoded Teradek Cube Live Stream\",\n   \"created_at\": \"2020-01-26T20:07:15.615Z\",\n   \"updated_at\": \"2020-01-27T22:30:08.616Z\"\n  }\n ]\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/live_streams?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"live_streams"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "players",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Fetch a player",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/players/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{playerId}}",
											"description": "The unique alphanumeric string that identifies the player."
										}
									]
								},
								"description": "This operation shows details of a specific player."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"player\": {\n  \"countdown\": true,\n  \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n  \"created_at\": \"2020-01-26T20:07:15.768Z\",\n  \"embed_code\": \"<div id='wowza_player'></div><script id='player_embed' src='//player.cloud.wowza.com/hosted/e8dk5bf6/wowza.js' type='text/javascript'></script>\",\n  \"hls_playback_url\": \"http://wowza-lh.akamaihd.net/z/d24b8a50_1@123456/master.m3u8\",\n  \"hosted_page\": true,\n  \"hosted_page_description\": \"My Hosted Page Description\",\n  \"hosted_page_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/hosted_page_logo_image/23424/5bad28.jpg\",\n  \"hosted_page_sharing_icons\": false,\n  \"hosted_page_title\": \"My Hosted Page\",\n  \"hosted_page_url\": \"https://player.cloud.wowza.com/hosted/e8dk5bf6/player.html\",\n  \"logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/logo_image/23424/5bad28.jpg\",\n  \"logo_position\": \"bottom-left\",\n  \"responsive\": false,\n  \"transcoder_id\": \"6Qbymbbq\",\n  \"type\": \"original_html5\",\n  \"updated_at\": \"2020-01-28T14:21:03.800Z\",\n  \"video_poster_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/video_poster_image/23424/5bad28.jpg\",\n  \"width\": 640\n }\n}"
								}
							]
						},
						{
							"name": "Update a player",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"player\": {\n        \"countdown\": \"<boolean>\",\n        \"countdown_at\": \"<dateTime>\",\n        \"hosted_page\": \"<boolean>\",\n        \"hosted_page_description\": \"<string>\",\n        \"hosted_page_logo_image\": \"<string>\",\n        \"hosted_page_sharing_icons\": \"<boolean>\",\n        \"hosted_page_title\": \"<string>\",\n        \"logo_image\": \"<string>\",\n        \"logo_position\": \"<string>\",\n        \"remove_hosted_page_logo_image\": \"<boolean>\",\n        \"remove_logo_image\": \"<boolean>\",\n        \"remove_video_poster_image\": \"<boolean>\",\n        \"responsive\": \"<boolean>\",\n        \"type\": \"<string>\",\n        \"video_poster_image\": \"<string>\",\n        \"width\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/players/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{playerId}}",
											"description": "The unique alphanumeric string that identifies the player."
										}
									]
								},
								"description": "This operation updates a player."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"player\": {\n        \"countdown\": true,\n        \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"logo_position\": \"bottom-right\",\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_logo_image\": true,\n        \"remove_video_poster_image\": true,\n        \"responsive\": false,\n        \"type\": \"wowza_player\",\n        \"video_poster_image\": \"[Base64-encoded string representation of an image]\",\n        \"width\": 640\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"player\": {\n        \"countdown\": true,\n        \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"logo_position\": \"bottom-right\",\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_logo_image\": true,\n        \"remove_video_poster_image\": true,\n        \"responsive\": false,\n        \"type\": \"wowza_player\",\n        \"video_poster_image\": \"[Base64-encoded string representation of an image]\",\n        \"width\": 640\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"player\": {\n        \"countdown\": true,\n        \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"logo_position\": \"bottom-right\",\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_logo_image\": true,\n        \"remove_video_poster_image\": true,\n        \"responsive\": false,\n        \"type\": \"wowza_player\",\n        \"video_poster_image\": \"[Base64-encoded string representation of an image]\",\n        \"width\": 640\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"player\": {\n        \"countdown\": true,\n        \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"logo_position\": \"bottom-right\",\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_logo_image\": true,\n        \"remove_video_poster_image\": true,\n        \"responsive\": false,\n        \"type\": \"wowza_player\",\n        \"video_poster_image\": \"[Base64-encoded string representation of an image]\",\n        \"width\": 640\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"player\": {\n        \"countdown\": true,\n        \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"logo_position\": \"bottom-right\",\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_logo_image\": true,\n        \"remove_video_poster_image\": true,\n        \"responsive\": false,\n        \"type\": \"wowza_player\",\n        \"video_poster_image\": \"[Base64-encoded string representation of an image]\",\n        \"width\": 640\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"player\": {\n        \"countdown\": true,\n        \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n        \"hosted_page\": true,\n        \"hosted_page_description\": \"My Hosted Page Description\",\n        \"hosted_page_logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"hosted_page_sharing_icons\": true,\n        \"hosted_page_title\": \"My Hosted Page\",\n        \"logo_image\": \"[Base64-encoded string representation of an image]\",\n        \"logo_position\": \"bottom-right\",\n        \"remove_hosted_page_logo_image\": true,\n        \"remove_logo_image\": true,\n        \"remove_video_poster_image\": true,\n        \"responsive\": false,\n        \"type\": \"wowza_player\",\n        \"video_poster_image\": \"[Base64-encoded string representation of an image]\",\n        \"width\": 640\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"player\": {\n  \"countdown\": true,\n  \"countdown_at\": \"2020-01-29T20:00:00.000Z\",\n  \"created_at\": \"2020-01-26T20:07:15.768Z\",\n  \"embed_code\": \"<div id='wowza_player'></div><script id='player_embed' src='//player.cloud.wowza.com/hosted/e8dk5bf6/wowza.js' type='text/javascript'></script>\",\n  \"hls_playback_url\": \"http://wowza-lh.akamaihd.net/z/d24b8a50_1@123456/master.m3u8\",\n  \"hosted_page\": true,\n  \"hosted_page_description\": \"My Hosted Page Description\",\n  \"hosted_page_logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/hosted_page_logo_image/23424/5bad28.jpg\",\n  \"hosted_page_sharing_icons\": false,\n  \"hosted_page_title\": \"My Hosted Page\",\n  \"hosted_page_url\": \"https://player.cloud.wowza.com/hosted/e8dk5bf6/player.html\",\n  \"logo_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/logo_image/23424/5bad28.jpg\",\n  \"logo_position\": \"bottom-left\",\n  \"responsive\": false,\n  \"transcoder_id\": \"6Qbymbbq\",\n  \"type\": \"original_html5\",\n  \"updated_at\": \"2020-01-28T14:21:03.800Z\",\n  \"video_poster_image_url\": \"https://prod.s3.amazonaws.com/uploads/player/video_poster_image/23424/5bad28.jpg\",\n  \"width\": 640\n }\n}"
								}
							]
						},
						{
							"name": "Rebuild player code",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/players/:id/rebuild",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":id",
										"rebuild"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{playerId}}",
											"description": "The unique alphanumeric string that identifies the player."
										}
									]
								},
								"description": "This operation rebuilds the player with the current configuration."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/rebuild",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"rebuild"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/rebuild",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"rebuild"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/rebuild",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"rebuild"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/rebuild",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"rebuild"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"player\": {\n  \"state\": \"requested\"\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/rebuild",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"rebuild"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch the state of a player",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/players/:id/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{playerId}}",
											"description": "The unique alphanumeric string that identifies the player."
										}
									]
								},
								"description": "This operation shows the current state of a player."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"player\": {\n  \"state\": \"activated\"\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{player id}/urls",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetch a player URL",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls",
												":id"
											],
											"variable": [
												{
													"key": "player_id",
													"value": "{{playerId}}",
													"description": "The unique alphanumeric string that identifies the player."
												},
												{
													"key": "id",
													"value": "{{playerUrlId}}",
													"description": "The unique alphanumeric string that identifies the player URL."
												}
											]
										},
										"description": "This operation shows the details of a player URL."
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"url\": {\n  \"bitrate\": 4138,\n  \"height\": 1080,\n  \"label\": \"1920\",\n  \"player_id\": \"Jm1tPblTJm1t\",\n  \"url\": \"http://someurl.com/some/path/to/a/stream.m3u8\",\n  \"width\": 1920\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Update a player URL",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\": {\n        \"bitrate\": \"<integer>\",\n        \"height\": \"<integer>\",\n        \"label\": \"<string>\",\n        \"url\": \"<string>\",\n        \"width\": \"<integer>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls",
												":id"
											],
											"variable": [
												{
													"key": "player_id",
													"value": "{{playerId}}",
													"description": "The unique alphanumeric string that identifies the player."
												},
												{
													"key": "id",
													"value": "{{playerUrlId}}",
													"description": "The unique alphanumeric string that identifies the player URL."
												}
											]
										},
										"description": "This operation updates a player URL."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"url\": {\n  \"bitrate\": 4138,\n  \"height\": 1080,\n  \"label\": \"1920\",\n  \"player_id\": \"Jm1tPblTJm1t\",\n  \"url\": \"http://someurl.com/some/path/to/a/stream.m3u8\",\n  \"width\": 1920\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Delete a player URL",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls",
												":id"
											],
											"variable": [
												{
													"key": "player_id",
													"value": "{{playerId}}",
													"description": "The unique alphanumeric string that identifies the player."
												},
												{
													"key": "id",
													"value": "{{playerUrlId}}",
													"description": "The unique alphanumeric string that identifies the player URL."
												}
											]
										},
										"description": "This operation deletes a player URL. "
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/players/:player_id/urls/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":player_id",
														"urls",
														":id"
													],
													"variable": [
														{
															"key": "player_id"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a player URL",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": {\n        \"bitrate\": \"<integer>\",\n        \"height\": \"<integer>\",\n        \"label\": \"<string>\",\n        \"url\": \"<string>\",\n        \"width\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/players/:player_id/urls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":player_id",
										"urls"
									],
									"variable": [
										{
											"key": "player_id",
											"value": "{{playerId}}",
											"description": "The unique alphanumeric string that identifies the player."
										}
									]
								},
								"description": "This operation creates a new player URL."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"url\": {\n  \"bitrate\": 4138,\n  \"height\": 1080,\n  \"label\": \"1920\",\n  \"player_id\": \"Jm1tPblTJm1t\",\n  \"url\": \"http://someurl.com/some/path/to/a/stream.m3u8\",\n  \"width\": 1920\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"url\": {\n        \"bitrate\": 4128,\n        \"height\": 1080,\n        \"label\": \"1920\",\n        \"url\": \"http://somedomain.com/path/to/stream.m3u8\",\n        \"width\": 1920\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch all player URLs",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/players/:player_id/urls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":player_id",
										"urls"
									],
									"variable": [
										{
											"key": "player_id",
											"value": "{{playerId}}",
											"description": "The unique alphanumeric string that identifies the player."
										}
									]
								},
								"description": "This operation shows the details of all player URLs."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/players/:player_id/urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":player_id",
												"urls"
											],
											"variable": [
												{
													"key": "player_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"urls\": [\n  {\n   \"bitrate\": 4138,\n   \"height\": 1080,\n   \"label\": \"1920\",\n   \"player_id\": \"Jm1tPblTJm1t\",\n   \"url\": \"http://someurl.com/some/path/to/a/stream.m3u8\",\n   \"width\": 1920\n  },\n  {\n   \"bitrate\": 4138,\n   \"height\": 1080,\n   \"label\": \"iPhone\",\n   \"player_id\": \"Jm1tPblTJm1t\",\n   \"transcoder_id\": \"yjCVYf5l\",\n   \"url\": \"http://someurl.com/some/path/to/a/stream.m3u8\",\n   \"width\": 1920\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fetch all players",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-signature",
								"value": "",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/players?page={{filter_page}}&per_page={{filter_per_page}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"players"
							],
							"query": [
								{
									"key": "page",
									"value": "{{filter_page}}",
									"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "per_page",
									"value": "{{filter_per_page}}",
									"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
								}
							]
						},
						"description": "This operation shows limited details for all of your players. For detailed information, fetch a single player."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/players?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"players\": [\n  {\n   \"created_at\": \"2020-01-26T20:07:15.766Z\",\n   \"transcoder_id\": \"6Qbymbbq\",\n   \"type\": \"original_html5\",\n   \"updated_at\": \"2020-01-28T07:34:15.766Z\"\n  },\n  {\n   \"created_at\": \"2020-01-26T20:07:15.766Z\",\n   \"transcoder_id\": \"3kbb0hvf\",\n   \"type\": \"wowza_player\",\n   \"updated_at\": \"2020-01-28T10:03:22.766Z\"\n  }\n ]\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/players?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "recordings",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Fetch a recording",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recordings/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recordings",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{recordingId}}",
											"description": "The unique alphanumeric string that identifies the recording."
										}
									]
								},
								"description": "This operation shows the details of a specific recording."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"recording\": {\n  \"created_at\": \"2020-01-26T20:07:15.803Z\",\n  \"download_url\": \"https://s3.amazonaws.com/prod-wse-recordings/transcoder_035163/64886_00a613bf@367500.stream.0.mp4\",\n  \"duration\": 362905,\n  \"file_name\": \"00a613bf@367500.stream.0.mp4\",\n  \"file_size\": 53113429,\n  \"reason\": \"\",\n  \"starts_at\": \"2020-01-29T00:00:00.000Z\",\n  \"transcoding_uptime_id\": \"vxyz9876\",\n  \"state\": \"completed\",\n  \"transcoder_id\": \"bjQplmRw\",\n  \"transcoder_name\": \"My Camera\",\n  \"updated_at\": \"2020-01-28T05:49:48.803Z\"\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Delete a recording",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recordings/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recordings",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{recordingId}}",
											"description": "The unique alphanumeric string that identifies the recording."
										}
									]
								},
								"description": "This operation deletes a recording."
							},
							"response": [
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "No Content",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch the state of a recording",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recordings/:id/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recordings",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{recordingId}}",
											"description": "The unique alphanumeric string that identifies the recording."
										}
									]
								},
								"description": "This operation shows the current state of a recording."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"recording\": {\n  \"state\": \"completed\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/recordings/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recordings",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fetch all recordings",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/recordings?page={{filter_page}}&per_page={{filter_per_page}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recordings"
							],
							"query": [
								{
									"key": "page",
									"value": "{{filter_page}}",
									"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "per_page",
									"value": "{{filter_per_page}}",
									"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
								}
							]
						},
						"description": "This operation shows limited details for all of your recordings. For detailed information, fetch a single recording."
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/recordings?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recordings"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/recordings?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recordings"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"recordings\": [\n  {\n   \"transcoder_id\": \"bjaplmrw\",\n   \"state\": \"completed\",\n   \"reason\": \"\",\n   \"created_at\": \"2020-01-26T20:07:15.802Z\",\n   \"updated_at\": \"2020-01-28T00:47:16.802Z\"\n  },\n  {\n   \"transcoder_id\": \"PMNVbL4n\",\n   \"state\": \"converting\",\n   \"reason\": \"\",\n   \"created_at\": \"2020-01-25T20:07:15.802Z\",\n   \"updated_at\": \"2020-01-28T18:07:46.802Z\"\n  }\n ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "schedules",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Fetch a schedule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/schedules/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{scheduleId}}",
											"description": "The unique alphanumeric string that identifies the schedule."
										}
									]
								},
								"description": "This operation shows the details of a specific schedule."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"schedule\": {\n  \"action_type\": \"start_stop\",\n  \"begins_at\": \"2020-01-29T00:00:00.000Z\",\n  \"created_at\": \"2020-01-26T20:07:15.805Z\",\n  \"end_repeat\": \"2020-02-28\",\n  \"ends_at\": \"2020-02-28T23:59:59.999Z\",\n  \"name\": \"Scheduled recurring start for my camera\",\n  \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n  \"recurrence_type\": \"recur\",\n  \"start_repeat\": \"2020-01-29\",\n  \"state\": \"disabled\",\n  \"transcoder_id\": \"VGB21JFJ\",\n  \"transcoder_name\": \"My Camera\",\n  \"updated_at\": \"2020-01-28T18:39:10.805Z\"\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Update a schedule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schedule\": {\n        \"name\": \"<string>\",\n        \"action_type\": \"<string>\",\n        \"end_repeat\": \"<date>\",\n        \"recurrence_data\": \"<string>\",\n        \"start_repeat\": \"<date>\",\n        \"start_transcoder\": \"<dateTime>\",\n        \"stop_transcoder\": \"<dateTime>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/schedules/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{scheduleId}}",
											"description": "The unique alphanumeric string that identifies the schedule."
										}
									]
								},
								"description": "This operation updates a schedule."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"action_type\": \"start_stop\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"action_type\": \"start_stop\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"schedule\": {\n  \"action_type\": \"start_stop\",\n  \"begins_at\": \"2020-01-29T00:00:00.000Z\",\n  \"created_at\": \"2020-01-26T20:07:15.805Z\",\n  \"end_repeat\": \"2020-02-28\",\n  \"ends_at\": \"2020-02-28T23:59:59.999Z\",\n  \"name\": \"Scheduled recurring start for my camera\",\n  \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n  \"recurrence_type\": \"recur\",\n  \"start_repeat\": \"2020-01-29\",\n  \"state\": \"disabled\",\n  \"transcoder_id\": \"VGB21JFJ\",\n  \"transcoder_name\": \"My Camera\",\n  \"updated_at\": \"2020-01-28T18:39:10.805Z\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"action_type\": \"start_stop\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"action_type\": \"start_stop\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"action_type\": \"start_stop\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"action_type\": \"start_stop\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Delete a schedule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/schedules/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{scheduleId}}",
											"description": "The unique alphanumeric string that identifies the schedule."
										}
									]
								},
								"description": "This operation deletes a schedule."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "No Content",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Enable a schedule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/schedules/:id/enable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules",
										":id",
										"enable"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{scheduleId}}",
											"description": "The unique alphanumeric string that identifies the schedule."
										}
									]
								},
								"description": "This operation enables a schedule."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/enable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"enable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/enable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"enable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"schedule\": {\n  \"state\": \"enabled\"\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/enable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"enable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/enable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"enable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/enable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"enable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/enable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"enable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Disable a schedule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/schedules/:id/disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules",
										":id",
										"disable"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{scheduleId}}",
											"description": "The unique alphanumeric string that identifies the schedule."
										}
									]
								},
								"description": "This operation disables a schedule."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"schedule\": {\n  \"state\": \"disabled\"\n }\n}"
								}
							]
						},
						{
							"name": "Fetch the state of a schedule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/schedules/:id/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{scheduleId}}",
											"description": "The unique alphanumeric string that identifies the schedule."
										}
									]
								},
								"description": "This operation shows the current state of a schedule."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"schedule\": {\n  \"state\": \"enabled\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/schedules/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"schedules",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create a schedule",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "wsc-signature",
								"value": "",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication."
							},
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schedule\": {\n        \"name\": \"<string>\",\n        \"transcoder_id\": \"<string>\",\n        \"action_type\": \"<string>\",\n        \"recurrence_type\": \"<string>\",\n        \"end_repeat\": \"<date>\",\n        \"recurrence_data\": \"<string>\",\n        \"start_repeat\": \"<date>\",\n        \"start_transcoder\": \"<dateTime>\",\n        \"stop_transcoder\": \"<dateTime>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/schedules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"schedules"
							]
						},
						"description": "This operation creates a schedule."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"transcoder_id\": \"45lY33NP\",\n        \"action_type\": \"start_stop\",\n        \"recurrence_type\": \"recur\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/schedules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"schedule\": {\n  \"action_type\": \"start_stop\",\n  \"begins_at\": \"2020-01-29T00:00:00.000Z\",\n  \"created_at\": \"2020-01-26T20:07:15.805Z\",\n  \"end_repeat\": \"2020-02-28\",\n  \"ends_at\": \"2020-02-28T23:59:59.999Z\",\n  \"name\": \"Scheduled recurring start for my camera\",\n  \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n  \"recurrence_type\": \"recur\",\n  \"start_repeat\": \"2020-01-29\",\n  \"state\": \"disabled\",\n  \"transcoder_id\": \"VGB21JFJ\",\n  \"transcoder_name\": \"My Camera\",\n  \"updated_at\": \"2020-01-28T18:39:10.805Z\"\n }\n}"
						},
						{
							"name": "Unprocessable Entity",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"transcoder_id\": \"45lY33NP\",\n        \"action_type\": \"start_stop\",\n        \"recurrence_type\": \"recur\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/schedules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"schedule\": {\n        \"name\": \"Scheduled start for my camera\",\n        \"transcoder_id\": \"45lY33NP\",\n        \"action_type\": \"start_stop\",\n        \"recurrence_type\": \"recur\",\n        \"end_repeat\": \"2020-02-28\",\n        \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n        \"start_repeat\": \"2020-01-29\",\n        \"start_transcoder\": \"2020-01-29T00:00:00.000Z\",\n        \"stop_transcoder\": \"2020-02-28T23:59:59.999Z\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/schedules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						}
					]
				},
				{
					"name": "Fetch all schedules",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/schedules?page={{filter_page}}&per_page={{filter_per_page}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"schedules"
							],
							"query": [
								{
									"key": "page",
									"value": "{{filter_page}}",
									"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "per_page",
									"value": "{{filter_per_page}}",
									"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
								}
							]
						},
						"description": "This operation shows the details of all of your schedules."
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/schedules?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/schedules?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"schedules"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"schedules\": [\n  {\n   \"action_type\": \"start_stop\",\n   \"begins_at\": \"2020-01-29T00:00:00.000Z\",\n   \"created_at\": \"2020-01-26T20:07:15.804Z\",\n   \"end_repeat\": \"2020-02-28\",\n   \"ends_at\": \"2020-02-28T23:59:59.999Z\",\n   \"name\": \"Scheduled recurring start for my camera\",\n   \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n   \"recurrence_type\": \"recur\",\n   \"start_repeat\": \"2020-01-29\",\n   \"state\": \"disabled\",\n   \"transcoder_id\": \"VGB21JFJ\",\n   \"transcoder_name\": \"My Camera\",\n   \"updated_at\": \"2020-01-27T22:01:25.804Z\"\n  },\n  {\n   \"action_type\": \"stop\",\n   \"begins_at\": \"2020-01-29T00:00:00.000Z\",\n   \"created_at\": \"2020-01-26T20:07:15.804Z\",\n   \"ends_at\": \"2020-02-28T23:59:59.999Z\",\n   \"name\": \"Scheduled stop for my live event\",\n   \"recurrence_type\": \"once\",\n   \"state\": \"enabled\",\n   \"transcoder_id\": \"Qjl5J38Z\",\n   \"transcoder_name\": \"Awesome Live Event\",\n   \"updated_at\": \"2020-01-27T16:45:30.804Z\"\n  }\n ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "stream sources",
			"item": [
				{
					"name": "wowza",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetch a Wowza stream source",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamSourceId}}",
													"description": "The unique alphanumeric string that identifies the Wowza stream source."
												}
											]
										},
										"description": "(Available from version 1.4) This operation shows details of a specific Wowza stream source. A Wowza stream source enables automatic transcoder start, stop, and broadcast location detection."
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_source_wowza\": {\n  \"created_at\": \"2020-01-26T20:07:15.916Z\",\n  \"name\": \"My Wowza Stream Source\",\n  \"primary_url\": \"rtmp://origin.cdn.wowza.com:1935/live\",\n  \"state\": \"stopped\",\n  \"stream_name\": \"0I3abc1FPZ2P3Qxdfz3YwKtZdDqu6102\",\n  \"updated_at\": \"2020-01-28T02:21:32.916Z\"\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Update a Wowza stream source",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamSourceId}}",
													"description": "The unique alphanumeric string that identifies the Wowza stream source."
												}
											]
										},
										"description": "(Available from version 1.4) This operation updates a Wowza stream source. A Wowza stream source enables automatic transcoder start, stop, and broadcast location detection. "
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Updated Wowza Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Updated Wowza Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Updated Wowza Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Updated Wowza Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_source_wowza\": {\n  \"created_at\": \"2020-01-26T20:07:15.916Z\",\n  \"name\": \"My Updated Wowza Stream Source\",\n  \"primary_url\": \"rtmp://origin.cdn.wowza.com:1935/live\",\n  \"state\": \"stopped\",\n  \"stream_name\": \"0I3abc1FPZ2P3Qxdfz3YwKtZdDqu6102\",\n  \"updated_at\": \"2020-01-28T04:29:09.916Z\"\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Updated Wowza Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Updated Wowza Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Delete a Wowza stream source",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamSourceId}}",
													"description": "The unique alphanumeric string that identifies the Wowza stream source."
												}
											]
										},
										"description": "(Available from version 1.4) This operation deletes a Wowza stream source."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a Wowza stream source",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stream_sources/wowza",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_sources",
										"wowza"
									]
								},
								"description": "(Available from version 1.4) This operation creates a Wowza stream source.  A Wowza stream source enables automatic transcoder start, stop, and broadcast location detection."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Wowza Stream Source\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_source_wowza\": {\n  \"created_at\": \"2020-01-26T20:07:15.916Z\",\n  \"name\": \"My Wowza Stream Source\",\n  \"primary_url\": \"rtmp://origin.cdn.wowza.com:1935/live\",\n  \"state\": \"stopped\",\n  \"stream_name\": \"0I3abc1FPZ2P3Qxdfz3YwKtZdDqu6102\",\n  \"updated_at\": \"2020-01-28T02:21:32.916Z\"\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Wowza Stream Source\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_wowza\": {\n        \"name\": \"My Wowza Stream Source\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch all Wowza stream sources",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_sources/wowza?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_sources",
										"wowza"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "(Available from version 1.4) This operation shows limited details for all of your Wowza stream sources. A Wowza stream source enables automatic transcoder start, stop, and broadcast location detection. For detailed information, fetch a single Wowza stream source."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/wowza?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"wowza"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_sources_wowza\": [\n  {\n   \"created_at\": \"2020-01-26T20:07:15.916Z\",\n   \"name\": \"My Wowza Stream Source\",\n   \"updated_at\": \"2020-01-28T08:06:00.916Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.916Z\",\n   \"name\": \"My other Wowza Stream Source\",\n   \"updated_at\": \"2020-01-28T02:56:27.916Z\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "akamai (Sunset)",
					"item": [
						{
							"name": "{id} (Sunset)",
							"item": [
								{
									"name": "(Sunset) Fetch an Akamai stream source",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamSourceId}}",
													"description": "The unique alphanumeric string that identifies the Akamai stream source."
												}
											]
										},
										"description": "The GET /stream_sources/akamai/{id} operation is sunset and no longer available in v1.4 and later. To retrieve a list of Akamai stream sources, use GET /stream_sources instead."
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_source_akamai\": {\n  \"backup_ip_address\": \"54.183.109.82\",\n  \"backup_url\": \"rtmp://b.ep335658.i.akamaientrypoint.net/EntryPoint\",\n  \"created_at\": \"2020-01-26T20:07:15.915Z\",\n  \"ip_address\": \"54.183.109.81\",\n  \"location\": \"us_west_california\",\n  \"location_method\": \"region\",\n  \"name\": \"My Region-based Akamai Stream Source\",\n  \"password\": \"0da80af99e\",\n  \"playback_url\": \"rtmp://cp319499.live.edgefcs.net/live/148e575d@335658\",\n  \"primary_url\": \"rtmp://p.ep335658.i.akamaientrypoint.net/EntryPoint\",\n  \"provider\": \"akamai_legacy_rtmp\",\n  \"stream_name\": \"148e575d@335658\",\n  \"updated_at\": \"2020-01-28T11:21:52.915Z\",\n  \"username\": \"383435\"\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Update an Akamai stream source",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamSourceId}}",
													"description": "The unique alphanumeric string that identifies the Akamai stream source."
												}
											]
										},
										"description": "The PATCH /stream_sources/akamai/{id} operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"My Updated IP address-based Akamai Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"My Updated IP address-based Akamai Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"My Updated IP address-based Akamai Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"My Updated IP address-based Akamai Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"My Updated IP address-based Akamai Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_source_akamai\": {\n  \"backup_ip_address\": \"70.36.141.80\",\n  \"created_at\": \"2020-01-25T20:07:15.915Z\",\n  \"ip_address\": \"70.36.141.78\",\n  \"location_method\": \"ip_address\",\n  \"name\": \"My Updated IP address-based Akamai Stream Source\",\n  \"playback_url\": \"rtmp://cp319499.live.edgefcs.net/live/37d5f10e@156549\",\n  \"provider\": \"akamai_legacy_rtmp\",\n  \"stream_name\": \"37d5f10e@156549\",\n  \"updated_at\": \"2020-01-28T14:18:11.915Z\"\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"My Updated IP address-based Akamai Stream Source\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Delete an Akamai stream source",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamSourceId}}",
													"description": "The unique alphanumeric string that identifies the Akamai stream source."
												}
											]
										},
										"description": "The DELETE /stream_sources/akamai/{id} operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_sources/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_sources",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "(Sunset) Create an Akamai stream source",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream_source_akamai\": {\n        \"name\": \"<string>\",\n        \"location_method\": \"<string>\",\n        \"backup_ip_address\": \"<string>\",\n        \"ip_address\": \"<string>\",\n        \"location\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stream_sources/akamai",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_sources",
										"akamai"
									]
								},
								"description": "The POST /stream_sources/akamai operation is sunset and no longer available in v1.4 and later."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_akamai\": {\n        \"location_method\": \"region\",\n        \"name\": \"My Region-based Akamai Stream Source\",\n        \"location\": \"us_west_california\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_source_akamai\": {\n  \"backup_ip_address\": \"54.183.109.82\",\n  \"backup_url\": \"rtmp://b.ep335658.i.akamaientrypoint.net/EntryPoint\",\n  \"created_at\": \"2020-01-26T20:07:15.915Z\",\n  \"ip_address\": \"54.183.109.81\",\n  \"location\": \"us_west_california\",\n  \"location_method\": \"region\",\n  \"name\": \"My Region-based Akamai Stream Source\",\n  \"password\": \"0da80af99e\",\n  \"playback_url\": \"rtmp://cp319499.live.edgefcs.net/live/148e575d@335658\",\n  \"primary_url\": \"rtmp://p.ep335658.i.akamaientrypoint.net/EntryPoint\",\n  \"provider\": \"akamai_legacy_rtmp\",\n  \"stream_name\": \"148e575d@335658\",\n  \"updated_at\": \"2020-01-28T11:21:52.915Z\",\n  \"username\": \"383435\"\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_akamai\": {\n        \"location_method\": \"region\",\n        \"name\": \"My Region-based Akamai Stream Source\",\n        \"location\": \"us_west_california\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_source_akamai\": {\n        \"location_method\": \"region\",\n        \"name\": \"My Region-based Akamai Stream Source\",\n        \"location\": \"us_west_california\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "(Sunset) Fetch all Akamai stream sources",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_sources/akamai?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_sources",
										"akamai"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "The GET /stream_sources/akamai operation is sunset and no longer available in v1.4 and later. To retrieve a list of Akamai stream sources, use GET /stream_sources instead."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_sources_akamai\": [\n  {\n   \"created_at\": \"2020-01-26T20:07:15.812Z\",\n   \"name\": \"My Region-based Akamai Stream Source\",\n   \"updated_at\": \"2020-01-28T09:50:58.812Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.812Z\",\n   \"name\": \"My IP address-based Akamai Stream Source\",\n   \"updated_at\": \"2020-01-27T17:19:59.812Z\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_sources/akamai?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_sources",
												"akamai"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fetch all stream sources",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stream_sources?page={{filter_page}}&per_page={{filter_per_page}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stream_sources"
							],
							"query": [
								{
									"key": "page",
									"value": "{{filter_page}}",
									"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "per_page",
									"value": "{{filter_per_page}}",
									"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
								}
							]
						},
						"description": "This operation shows limited details for all of your stream sources. For detailed information, fetch a single stream source of the appropriate type."
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stream_sources?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_sources"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stream_sources?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_sources"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"stream_sources\": [\n  {\n   \"name\": \"My region-based Stream Source\",\n   \"type\": \"wowza\",\n   \"created_at\": \"2020-01-26T20:07:15.811Z\",\n   \"updated_at\": \"2020-01-28T11:17:00.811Z\"\n  },\n  {\n   \"name\": \"My IP address based Stream Source\",\n   \"type\": \"wowza\",\n   \"created_at\": \"2020-01-25T20:07:15.811Z\",\n   \"updated_at\": \"2020-01-28T15:39:22.811Z\"\n  }\n ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "stream targets",
			"item": [
				{
					"name": "custom",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetch a custom stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the custom stream target."
												}
											]
										},
										"description": "This operation shows the details of a specific custom stream target."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_custom\": {\n  \"created_at\": \"2020-01-25T20:07:15.926Z\",\n  \"name\": \"My Custom Stream Target\",\n  \"primary_url\": \"rtmp://p.ep123456.i.akamaientrypoint.net/EntryPoint\",\n  \"provider\": \"rtmp\",\n  \"stream_name\": \"c8467d50@123456\",\n  \"updated_at\": \"2020-01-28T18:52:24.926Z\"\n }\n}"
										}
									]
								},
								{
									"name": "Update a custom stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_custom\": {\n        \"backup_url\": \"<string>\",\n        \"hds_playback_url\": \"<string>\",\n        \"hls_playback_url\": \"<string>\",\n        \"name\": \"<string>\",\n        \"password\": \"<string>\",\n        \"primary_url\": \"<string>\",\n        \"provider\": \"<string>\",\n        \"rtmp_playback_url\": \"<string>\",\n        \"stream_name\": \"<string>\",\n        \"username\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the custom stream target."
												}
											]
										},
										"description": "This operation updates a custom stream target."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Updated Custom Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Updated Custom Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Updated Custom Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Updated Custom Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_custom\": {\n  \"created_at\": \"2020-01-25T20:07:15.927Z\",\n  \"name\": \"My Updated Custom Stream Target\",\n  \"primary_url\": \"rtmp://p.ep123456.i.akamaientrypoint.net/EntryPoint\",\n  \"provider\": \"rtmp\",\n  \"stream_name\": \"c8467d50@123456\",\n  \"updated_at\": \"2020-01-27T17:18:20.927Z\"\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Updated Custom Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Updated Custom Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Delete a custom stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the custom stream target."
												}
											]
										},
										"description": "This operation deletes a custom stream target."
									},
									"response": [
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/custom/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"custom",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a custom stream target",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"<string>\",\n        \"primary_url\": \"<string>\",\n        \"provider\": \"<string>\",\n        \"stream_name\": \"<string>\",\n        \"backup_url\": \"<string>\",\n        \"hds_playback_url\": \"<string>\",\n        \"hls_playback_url\": \"<string>\",\n        \"password\": \"<string>\",\n        \"rtmp_playback_url\": \"<string>\",\n        \"username\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stream_targets/custom",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"custom"
									]
								},
								"description": "This operation creates a custom stream target for an external, third-party destination."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Custom Stream Target\",\n        \"primary_url\": \"rtmp://p.ep337857.i.akamaientrypoint.net/EntryPoint\",\n        \"provider\": \"rtmp\",\n        \"stream_name\": \"c8467d50@337857\",\n        \"backup_url\": \"rtmp://b.ep337857.i.akamaientrypoint.net/EntryPoint\",\n        \"hds_playback_url\": \"rtmp://cp319499.live.edgefcs.net/live/c9467d50@337857\",\n        \"hls_playback_url\": \"http://xyz.akamaihd.net/z/723a8b9c_1@337857/manifest.f4m\",\n        \"password\": \"cb1e77e98d\",\n        \"rtmp_playback_url\": \"rtmp://cp123456.live.edgefcs.net/live//[EVENT]@654321\",\n        \"username\": \"319699\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_target_custom\": {\n  \"created_at\": \"2020-01-25T20:07:15.926Z\",\n  \"name\": \"My Custom Stream Target\",\n  \"primary_url\": \"rtmp://p.ep123456.i.akamaientrypoint.net/EntryPoint\",\n  \"provider\": \"rtmp\",\n  \"stream_name\": \"c8467d50@123456\",\n  \"updated_at\": \"2020-01-28T18:52:24.926Z\"\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Custom Stream Target\",\n        \"primary_url\": \"rtmp://p.ep337857.i.akamaientrypoint.net/EntryPoint\",\n        \"provider\": \"rtmp\",\n        \"stream_name\": \"c8467d50@337857\",\n        \"backup_url\": \"rtmp://b.ep337857.i.akamaientrypoint.net/EntryPoint\",\n        \"hds_playback_url\": \"rtmp://cp319499.live.edgefcs.net/live/c9467d50@337857\",\n        \"hls_playback_url\": \"http://xyz.akamaihd.net/z/723a8b9c_1@337857/manifest.f4m\",\n        \"password\": \"cb1e77e98d\",\n        \"rtmp_playback_url\": \"rtmp://cp123456.live.edgefcs.net/live//[EVENT]@654321\",\n        \"username\": \"319699\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_custom\": {\n        \"name\": \"My Custom Stream Target\",\n        \"primary_url\": \"rtmp://p.ep337857.i.akamaientrypoint.net/EntryPoint\",\n        \"provider\": \"rtmp\",\n        \"stream_name\": \"c8467d50@337857\",\n        \"backup_url\": \"rtmp://b.ep337857.i.akamaientrypoint.net/EntryPoint\",\n        \"hds_playback_url\": \"rtmp://cp319499.live.edgefcs.net/live/c9467d50@337857\",\n        \"hls_playback_url\": \"http://xyz.akamaihd.net/z/723a8b9c_1@337857/manifest.f4m\",\n        \"password\": \"cb1e77e98d\",\n        \"rtmp_playback_url\": \"rtmp://cp123456.live.edgefcs.net/live//[EVENT]@654321\",\n        \"username\": \"319699\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch all custom stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_targets/custom?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"custom"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "This operation lists limited details for all of your custom stream targets. For detailed information, fetch a single custom stream target."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/custom?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"custom"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_targets_custom\": [\n  {\n   \"created_at\": \"2020-01-25T20:07:15.923Z\",\n   \"name\": \"My Custom Stream Target\",\n   \"updated_at\": \"2020-01-27T16:22:12.923Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.923Z\",\n   \"name\": \"My Second Custom Stream Target\",\n   \"updated_at\": \"2020-01-28T09:03:20.923Z\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "fastly",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetch a Wowza CDN on Fastly stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "(Available from version 1.4) This operation shows the details of a specific Wowza CDN on Fastly stream target."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_fastly\": {\n  \"created_at\": \"2020-01-25T20:07:15.928Z\",\n  \"name\": \"My Wowza CDN on Fastly Stream Target\",\n  \"playback_url\": \"https://[subdomain]/TWhoL3BiZnJXMFhmNzZVN3JrZDAwUT09/hls/live/ZmYxSXRrTERrUlk9/playlist.m3u8\",\n  \"state\": \"activated\",\n  \"stream_name\": \"9a00105a\",\n  \"updated_at\": \"2020-01-28T01:41:50.928Z\"\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Update a Wowza CDN on Fastly stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "(Available from version 1.4) This operation updates a Wowza CDN on Fastly stream target."
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Updated Wowza CDN on Fastly Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Updated Wowza CDN on Fastly Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Updated Wowza CDN on Fastly Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Updated Wowza CDN on Fastly Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Updated Wowza CDN on Fastly Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_fastly\": {\n  \"created_at\": \"2020-01-25T20:07:15.928Z\",\n  \"name\": \"My Updated Wowza CDN on Fastly Stream Target\",\n  \"playback_url\": \"https://[subdomain]/TWhoL3BiZnJXMFhmNzZVN3JrZDAwUT09/hls/live/ZmYxSXRrTERrUlk9/playlist.m3u8\",\n  \"state\": \"activated\",\n  \"stream_name\": \"9a00105a\",\n  \"updated_at\": \"2020-01-28T14:06:03.928Z\"\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Updated Wowza CDN on Fastly Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Delete a Wowza CDN on Fastly stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "(Available from version 1.4) This operation deletes a Wowza CDN on Fastly stream target."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/fastly/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"fastly",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a Wowza CDN on Fastly stream target",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stream_targets/fastly",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"fastly"
									]
								},
								"description": "(Available from version 1.4) This operation creates a Wowza CDN on Fastly stream target to deliver your stream using the Wowza CDN on Fastly.\n #  \n > **Note:** The Wowza Streaming Cloud integration with Fastly is a beta feature that's available in private preview. Participation is by invitation only and is subject to the terms of the Wowza Preview End User License Agreement."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Fastly Stream Target\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_target_fastly\": {\n  \"created_at\": \"2020-01-25T20:07:15.928Z\",\n  \"name\": \"My Wowza CDN on Fastly Stream Target\",\n  \"playback_url\": \"https://[subdomain]/TWhoL3BiZnJXMFhmNzZVN3JrZDAwUT09/hls/live/ZmYxSXRrTERrUlk9/playlist.m3u8\",\n  \"state\": \"activated\",\n  \"stream_name\": \"9a00105a\",\n  \"updated_at\": \"2020-01-28T01:41:50.928Z\"\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Fastly Stream Target\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_fastly\": {\n        \"name\": \"My Fastly Stream Target\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch all Wowza CDN on Fastly stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_targets/fastly?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"fastly"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "(Available from version 1.4) This operation lists limited details for all of your Wowza CDN on Fastly stream targets. For detailed information, fetch a single target."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_targets_fastly\": [\n  {\n   \"created_at\": \"2020-01-25T20:07:15.925Z\",\n   \"name\": \"My Wowza CDN on Fastly Stream Target\",\n   \"updated_at\": \"2020-01-27T17:29:46.925Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.925Z\",\n   \"name\": \"My Second Wowza CDN on Fastly Stream Target\",\n   \"updated_at\": \"2020-01-28T11:59:56.925Z\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/fastly?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"fastly"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ull",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetch an ultra low latency stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the ultra low latency stream target."
												}
											]
										},
										"description": "This operation shows the details of a specific ultra low latency stream target. \n\n Ultra low latency stream targets are available through subscription to [Wowza Streaming Cloud with Ultra Low Latency](https://www.wowza.com/products/streaming-cloud#ultra-low-latency)."
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_ull\": {\n  \"connection_code\": \"54ddf5\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.926Z\",\n  \"created_at\": \"2020-01-25T20:07:15.926Z\",\n  \"enabled\": true,\n  \"enabled_hls\": true,\n  \"name\": \"My Ultra Low Latency Push Stream Target\",\n  \"playback_urls\": {\n   \"ws\": [\n    \"ws://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239/stream.ws\",\n    \"wss://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239/stream.ws\"\n   ],\n   \"wowz\": [\n    \"wowz://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\",\n    \"wowzs://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\"\n   ],\n   \"hls\": [\n    \"https://wowzaqainjest9-i.akamaihd.net/hls/live/268548/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239/playlist.m3u8\"\n   ]\n  },\n  \"primary_url\": \"rtmp://origin.cdn.wowza.com:1935/live/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\",\n  \"source_delivery_method\": \"push\",\n  \"state\": \"stopped\",\n  \"stream_name\": \"0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\",\n  \"updated_at\": \"2020-01-28T06:39:31.926Z\"\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Update an ultra low latency stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_ull\": {\n        \"enabled\": \"<boolean>\",\n        \"ingest_ip_whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"name\": \"<string>\",\n        \"source_url\": \"<string>\",\n        \"region_override\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the ultra low latency stream target."
												}
											]
										},
										"description": "This operation updates an ultra low latency stream target. \n\n Ultra low latency stream targets are available through subscription to [Wowza Streaming Cloud with Ultra Low Latency](https://www.wowza.com/products/streaming-cloud#ultra-low-latency)."
									},
									"response": [
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Updated Ultra Low Latency Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Updated Ultra Low Latency Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Updated Ultra Low Latency Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Updated Ultra Low Latency Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_ull\": {\n  \"created_at\": \"2020-01-25T20:07:15.926Z\",\n  \"enabled\": true,\n  \"enable_hls\": false,\n  \"name\": \"My Updated Ultra Low Latency Stream Target\",\n  \"playback_urls\": {\n   \"ws\": [\n    \"ws://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16236/stream.ws\",\n    \"wss://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16236/stream.ws\"\n   ],\n   \"wowz\": [\n    \"wowz://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16236\",\n    \"wowzs://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16236\"\n   ]\n  },\n  \"source_delivery_method\": \"pull\",\n  \"source_url\": \"rtsp://10.1.2.3/live/mystream\",\n  \"state\": \"stopped\",\n  \"updated_at\": \"2020-01-27T23:59:58.926Z\"\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Updated Ultra Low Latency Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Updated Ultra Low Latency Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Delete an ultra low latency stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the ultra low latency stream target."
												}
											]
										},
										"description": "This operation deletes an ultra low latency stream target. \n\n Ultra low latency stream targets are available through subscription to [Wowza Streaming Cloud with Ultra Low Latency](https://www.wowza.com/products/streaming-cloud#ultra-low-latency)."
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/ull/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"ull",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create an ultra low latency stream target",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"<string>\",\n        \"source_delivery_method\": \"<string>\",\n        \"source_url\": \"<string>\",\n        \"enable_hls\": \"<boolean>\",\n        \"enabled\": \"<boolean>\",\n        \"ingest_ip_whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"region_override\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stream_targets/ull",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"ull"
									]
								},
								"description": "This operation creates an ultra low latency stream target. \n\n Ultra low latency stream targets are available through subscription to [Wowza Streaming Cloud with Ultra Low Latency](https://www.wowza.com/products/streaming-cloud#ultra-low-latency)."
							},
							"response": [
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Ultra Low Latency Stream Target\",\n        \"source_delivery_method\": \"pull\",\n        \"source_url\": \"rtsp://example.com/video\",\n        \"enable_hls\": true,\n        \"enabled\": true,\n        \"ingest_ip_whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"region_override\": \"origin-nl-central1.cdn.wowza.com\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Ultra Low Latency Stream Target\",\n        \"source_delivery_method\": \"pull\",\n        \"source_url\": \"rtsp://example.com/video\",\n        \"enable_hls\": true,\n        \"enabled\": true,\n        \"ingest_ip_whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"region_override\": \"origin-nl-central1.cdn.wowza.com\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_target_ull\": {\n  \"connection_code\": \"54ddf5\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.926Z\",\n  \"created_at\": \"2020-01-25T20:07:15.926Z\",\n  \"enabled\": true,\n  \"enabled_hls\": true,\n  \"name\": \"My Ultra Low Latency Push Stream Target\",\n  \"playback_urls\": {\n   \"ws\": [\n    \"ws://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239/stream.ws\",\n    \"wss://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239/stream.ws\"\n   ],\n   \"wowz\": [\n    \"wowz://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\",\n    \"wowzs://edge.cdn.wowza.com/live/_definst_/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\"\n   ],\n   \"hls\": [\n    \"https://wowzaqainjest9-i.akamaihd.net/hls/live/268548/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239/playlist.m3u8\"\n   ]\n  },\n  \"primary_url\": \"rtmp://origin.cdn.wowza.com:1935/live/0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\",\n  \"source_delivery_method\": \"push\",\n  \"state\": \"stopped\",\n  \"stream_name\": \"0I0q1bjZhRzZtfSdv4TpCnlmwQT16239\",\n  \"updated_at\": \"2020-01-28T06:39:31.926Z\"\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_ull\": {\n        \"name\": \"My Ultra Low Latency Stream Target\",\n        \"source_delivery_method\": \"pull\",\n        \"source_url\": \"rtsp://example.com/video\",\n        \"enable_hls\": true,\n        \"enabled\": true,\n        \"ingest_ip_whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"region_override\": \"origin-nl-central1.cdn.wowza.com\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch all ultra low latency stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_targets/ull?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"ull"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "This operation lists limited details for all of your ultra low latency stream targets. For detailed information, fetch a single ultra low latency stream target. \n\n Ultra low latency stream targets are available through subscription to [Wowza Streaming Cloud with Ultra Low Latency](https://www.wowza.com/products/streaming-cloud#ultra-low-latency)."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_targets_ull\": [\n  {\n   \"created_at\": \"2020-01-25T20:07:15.923Z\",\n   \"name\": \"My Wowza Ultra Low Latency Pull Stream Target\",\n   \"updated_at\": \"2020-01-28T08:40:02.923Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.923Z\",\n   \"name\": \"My Wowza Ultra Low Latency Push Stream Target\",\n   \"updated_at\": \"2020-01-28T12:10:30.923Z\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch all started ultra low latency stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_targets/ull/started?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"ull",
										"started"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "(Available from version 1.3) This operation lists limited details for all ultra low latency stream targets with a *state* of **started**."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull/started?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull",
												"started"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_targets_ull\": [\n  {\n   \"created_at\": \"2020-01-25T20:07:15.923Z\",\n   \"name\": \"My Wowza Ultra Low Latency Pull Stream Target\",\n   \"updated_at\": \"2020-01-28T08:40:02.923Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.923Z\",\n   \"name\": \"My Wowza Ultra Low Latency Push Stream Target\",\n   \"updated_at\": \"2020-01-28T12:10:30.923Z\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/ull/started?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"ull",
												"started"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "akamai",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetch a Wowza CDN on Akamai stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "This operation shows the details of a specific Wowza CDN on Akamai stream target."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_akamai\": {\n  \"created_at\": \"2020-01-25T20:07:15.927Z\",\n  \"name\": \"My Wowza Stream Target\",\n  \"provider\": \"akamai_cupertino\",\n  \"use_secure_ingest\": false,\n  \"use_cors\": false,\n  \"stream_name\": \"9a00105a\",\n  \"primary_url\": \"http://post.wowzasandbox3-i.akamaihd.net/252232/9a00105a\",\n  \"hls_playback_url\": \"https://wowzasandbox3-i.akamaihd.net/hls/live/252232/9a00105a/playlist.m3u8\",\n  \"connection_code\": \"456fcc\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.927Z\",\n  \"updated_at\": \"2020-01-27T21:50:29.927Z\"\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Update a Wowza CDN on Akamai stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"<string>\",\n        \"provider\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "This operation updates a Wowza CDN on Akamai stream target."
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_akamai\": {\n  \"created_at\": \"2020-01-25T20:07:15.928Z\",\n  \"name\": \"My Updated Wowza Stream Target\",\n  \"provider\": \"akamai_cupertino\",\n  \"use_secure_ingest\": false,\n  \"use_cors\": false,\n  \"stream_name\": \"9a00105a\",\n  \"primary_url\": \"http://post.wowzasandbox3-i.akamaihd.net/252232/9a00105a\",\n  \"hls_playback_url\": \"https://wowzasandbox3-i.akamaihd.net/hls/live/252232/9a00105a/playlist.m3u8\",\n  \"connection_code\": \"456fcc\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.928Z\",\n  \"updated_at\": \"2020-01-28T03:25:54.928Z\"\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Delete a Wowza CDN on Akamai stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "This operation deletes a Wowza CDN on Akamai stream target."
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/akamai/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"akamai",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create a Wowza CDN on Akamai stream target",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"<string>\",\n        \"location\": \"<string>\",\n        \"provider\": \"<string>\",\n        \"use_cors\": \"<boolean>\",\n        \"use_secure_ingest\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stream_targets/akamai",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"akamai"
									]
								},
								"description": "This operation creates a Wowza CDN on Akamai stream target for a Wowza CDN."
							},
							"response": [
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Wowza Stream Target\",\n        \"location\": \"eu_germany\",\n        \"provider\": \"akamai\",\n        \"use_cors\": true,\n        \"use_secure_ingest\": true\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Wowza Stream Target\",\n        \"location\": \"eu_germany\",\n        \"provider\": \"akamai\",\n        \"use_cors\": true,\n        \"use_secure_ingest\": true\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_akamai\": {\n        \"name\": \"My Wowza Stream Target\",\n        \"location\": \"eu_germany\",\n        \"provider\": \"akamai\",\n        \"use_cors\": true,\n        \"use_secure_ingest\": true\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_target_akamai\": {\n  \"created_at\": \"2020-01-25T20:07:15.927Z\",\n  \"name\": \"My Wowza Stream Target\",\n  \"provider\": \"akamai_cupertino\",\n  \"use_secure_ingest\": false,\n  \"use_cors\": false,\n  \"stream_name\": \"9a00105a\",\n  \"primary_url\": \"http://post.wowzasandbox3-i.akamaihd.net/252232/9a00105a\",\n  \"hls_playback_url\": \"https://wowzasandbox3-i.akamaihd.net/hls/live/252232/9a00105a/playlist.m3u8\",\n  \"connection_code\": \"456fcc\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.927Z\",\n  \"updated_at\": \"2020-01-27T21:50:29.927Z\"\n }\n}"
								}
							]
						},
						{
							"name": "Fetch all Wowza CDN on Akamai stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_targets/akamai?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"akamai"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "This operation lists limited details for all of your Wowza CDN on Akamai stream targets. For detailed information, fetch a single Wowza CDN on Akamai stream target."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/akamai?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"akamai"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_targets_akamai\": [\n  {\n   \"created_at\": \"2020-01-25T20:07:15.925Z\",\n   \"name\": \"My Wowza Stream Target\",\n   \"updated_at\": \"2020-01-27T22:43:31.925Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.925Z\",\n   \"name\": \"My Second Wowza Stream Target\",\n   \"updated_at\": \"2020-01-28T13:33:16.925Z\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{id}",
					"item": [
						{
							"name": "metrics",
							"item": [
								{
									"name": "Fetch current health metrics for an active ultra low latency stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/metrics/current",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"metrics",
												"current"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "This operation returns a snapshot of the current connection and throughput details for an active ultra low latency stream target. The interval for current metrics is 30 seconds from the moment of the query.   \n #  \n > <**Note:** Ultra low latency stream targets are available through subscription to [Wowza Streaming Cloud with Ultra Low Latency](https://www.wowza.com/products/streaming-cloud#ultra-low-latency). "
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"current"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"current"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"current"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target\": {\n  \"id\": \"abcd1234\",\n  \"metrics\": {\n   \"average_total_connections\": 10,\n   \"minimum_total_connections\": 0,\n   \"maximum_total_connections\": 20,\n   \"new_connections\": 2,\n   \"dropped_connections\": 0,\n   \"average_bytes_in\": 456789.123,\n   \"created_at\": \"2017-08-09T16:18:26.000Z\"\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"current"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"current"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Fetch historic health metrics for an ultra low latency stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/metrics/historic?from={{filter_datetime_from}}&to={{filter_datetime_to}}&interval={{filter_interval}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"metrics",
												"historic"
											],
											"query": [
												{
													"key": "from",
													"value": "{{filter_datetime_from}}",
													"description": "The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of **YYYY-MM-DDTHH:MM:SSZ** where **HH** is a 24-hour clock in UTC."
												},
												{
													"key": "to",
													"value": "{{filter_datetime_to}}",
													"description": "The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of **YYYY-MM-DDTHH:MM:SSZ** where **HH** is a 24-hour clock in UTC."
												},
												{
													"key": "interval",
													"value": "{{filter_interval}}",
													"description": "The length of time for a block of metrics. The default is **10m** (10 minutes)."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "This operation shows historic connection and throughput details for an ultra low latency stream target.   \n #  \n > **Note:** Ultra low latency stream targets are available through subscription to [Wowza Streaming Cloud with Ultra Low Latency](https://www.wowza.com/products/streaming-cloud#ultra-low-latency). "
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/historic?from=<string>&to=<string>&interval=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"historic"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "interval",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target\": {\n  \"interval\": \"10m\",\n  \"metrics\": [\n   {\n    \"average_total_connections\": 10.1,\n    \"minimum_total_connections\": 0,\n    \"maximum_total_connections\": 20,\n    \"new_connections\": 8,\n    \"dropped_connections\": 3,\n    \"average_bytes_in\": 456789.123,\n    \"created_at\": \"2017-08-09T16:19:17.000Z\"\n   },\n   {\n    \"average_total_connections\": 5.25,\n    \"minimum_total_connections\": 0,\n    \"maximum_total_connections\": 10,\n    \"new_connections\": 7,\n    \"dropped_connections\": 2,\n    \"average_bytes_in\": 456789.123,\n    \"created_at\": \"2017-08-09T16:19:07.000Z\"\n   },\n   {\n    \"average_total_connections\": 0,\n    \"minimum_total_connections\": 0,\n    \"maximum_total_connections\": 0,\n    \"new_connections\": 0,\n    \"dropped_connections\": 0,\n    \"average_bytes_in\": 456789.123,\n    \"created_at\": \"2017-08-09T16:18:57.000Z\"\n   }\n  ]\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/historic?from=<string>&to=<string>&interval=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"historic"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "interval",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/historic?from=<string>&to=<string>&interval=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"historic"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "interval",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/historic?from=<string>&to=<string>&interval=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"historic"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "interval",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:id/metrics/historic?from=<string>&to=<string>&interval=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":id",
														"metrics",
														"historic"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "interval",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Regenerate the connection code for any stream target",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_targets/:id/regenerate_connection_code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										":id",
										"regenerate_connection_code"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{streamTargetId}}",
											"description": "The unique alphanumeric string that identifies the stream target."
										}
									]
								},
								"description": "This operation regenerates the connection code of any kind of stream target."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_target\": {\n  \"connection_code\": \"0cd2e8\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:id/regenerate_connection_code",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":id",
												"regenerate_connection_code"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{stream target id}",
					"item": [
						{
							"name": "properties",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Fetch a property of a stream target",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties",
														":id"
													],
													"variable": [
														{
															"key": "stream_target_id",
															"value": "{{streamTargetId}}",
															"description": "The unique alphanumeric string that identifies the stream target."
														},
														{
															"key": "id",
															"value": "{{streamTargetPropertyId}}",
															"description": "The unique string that identifies the stream target property. The string contains the *section* and the *key*, connected by a dash. For example, **hls-chunkSize**."
														}
													]
												},
												"description": "This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a custom stream target or to a Wowza stream target whose *provider* is **akamai_cupertino**. Some properties, as noted in the **key** descriptions, can also be applied to Wowza CDN on Fastly stream targets."
											},
											"response": [
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"property\": {\n  \"key\": \"chunkSize\",\n  \"section\": \"hls\",\n  \"value\": 6\n }\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Delete a stream target property",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties",
														":id"
													],
													"variable": [
														{
															"key": "stream_target_id",
															"value": "{{streamTargetId}}",
															"description": "The unique alphanumeric string that identifies the stream target."
														},
														{
															"key": "id",
															"value": "{{streamTargetPropertyId}}",
															"description": "The unique string that identifies the stream target property. The string contains the *section* and the *key*, connected by a dash. For example, **hls-chunkSize**."
														}
													]
												},
												"description": "This operation removes a property from a stream target."
											},
											"response": [
												{
													"name": "Unprocessable Entity",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
													"code": 422,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "No Content",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"stream_targets",
																":stream_target_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "stream_target_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Configure a property for a stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"property\": {\n        \"section\": \"<string>\",\n        \"key\": \"<string>\",\n        \"value\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"properties"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "This operation configures a property for a stream target. Properties are available for a custom stream target or Wowza stream target whose *provider* is **akamai_cupertino**. Some properties, as noted in the **key** descriptions, can also be applied to Wowza CDN on Fastly stream targets. For more information see [Set advanced properties with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api)."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"property\": {\n        \"section\": \"hls\",\n        \"key\": \"chunkSize\",\n        \"value\": \"6\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"property\": {\n        \"section\": \"hls\",\n        \"key\": \"chunkSize\",\n        \"value\": \"6\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"property\": {\n        \"section\": \"hls\",\n        \"key\": \"chunkSize\",\n        \"value\": \"6\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"property\": {\n  \"key\": \"chunkSize\",\n  \"section\": \"hls\",\n  \"value\": 6\n }\n}"
										}
									]
								},
								{
									"name": "Fetch all properties of a stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"properties"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a custom stream target or to a Wowza stream target whose *provider* is **akamai_cupertino**. Some properties, as noted in the **key** descriptions, can also be applied to Wowza CDN on Fastly stream targets."
									},
									"response": [
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"key\": \"chunkSize\",\n   \"section\": \"hls\",\n   \"value\": 6\n  },\n  {\n   \"key\": \"relativePlaylists\",\n   \"section\": \"playlist\",\n   \"value\": true\n  }\n ]\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"properties"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "geoblock",
							"item": [
								{
									"name": "(Sunset) Create geo-blocking for a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"geoblock\": {\n        \"type\": \"<string>\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"geoblock"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The POST /stream_targets/{id}/geoblock operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"geoblock\": {\n  \"countries\": [\n   \"us\",\n   \"de\"\n  ],\n  \"created_at\": \"2020-01-26T20:07:15.612Z\",\n  \"state\": \"requested\",\n  \"stream_target_id\": \"PblTJm1t\",\n  \"type\": \"allow\",\n  \"updated_at\": \"2020-01-28T01:02:45.612Z\",\n  \"whitelist\": [\n   \"1.2.3.4\",\n   \"9.8.7.6\"\n  ]\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Fetch geo-blocking for a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"geoblock"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The GET /stream_targets/{id}/geoblock operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"geoblock\": {\n  \"countries\": [\n   \"us\",\n   \"de\"\n  ],\n  \"created_at\": \"2020-01-26T20:07:15.612Z\",\n  \"state\": \"requested\",\n  \"stream_target_id\": \"PblTJm1t\",\n  \"type\": \"allow\",\n  \"updated_at\": \"2020-01-28T01:02:45.612Z\",\n  \"whitelist\": [\n   \"1.2.3.4\",\n   \"9.8.7.6\"\n  ]\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Update geo-blocking for a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"geoblock\": {\n        \"type\": \"<string>\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"geoblock"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The PATCH /stream_targets/{id}/geoblock operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"geoblock\": {\n  \"countries\": [\n   \"us\",\n   \"de\"\n  ],\n  \"created_at\": \"2020-01-26T20:07:15.612Z\",\n  \"state\": \"requested\",\n  \"stream_target_id\": \"PblTJm1t\",\n  \"type\": \"allow\",\n  \"updated_at\": \"2020-01-28T01:02:45.612Z\",\n  \"whitelist\": [\n   \"1.2.3.4\",\n   \"9.8.7.6\"\n  ]\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"geoblock\": {\n        \"type\": \"allow\",\n        \"countries\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"whitelist\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/geoblock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"geoblock"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "token auth",
							"item": [
								{
									"name": "(Sunset) Create token authentication for a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token_auth\": {\n        \"enabled\": \"<boolean>\",\n        \"trusted_shared_secret\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"token_auth"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The POST /stream_targets/{id}/token_auth operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"token_auth\": {\n  \"created_at\": \"2020-01-26T20:07:15.935Z\",\n  \"enabled\": true,\n  \"stream_target_id\": \"PblTJm1t\",\n  \"trusted_shared_secret\": \"499602D2\",\n  \"updated_at\": \"2020-01-28T15:15:01.935Z\"\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Fetch token authentication for a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"token_auth"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The GET /stream_targets/{id}/token_auth operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"token_auth\": {\n  \"created_at\": \"2020-01-26T20:07:15.935Z\",\n  \"enabled\": true,\n  \"stream_target_id\": \"PblTJm1t\",\n  \"trusted_shared_secret\": \"499602D2\",\n  \"updated_at\": \"2020-01-28T15:15:01.935Z\"\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Update token authentication for a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token_auth\": {\n        \"enabled\": \"<boolean>\",\n        \"trusted_shared_secret\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												":stream_target_id",
												"token_auth"
											],
											"variable": [
												{
													"key": "stream_target_id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The PATCH /stream_targets/{id}/token_auth operation is sunset and no longer available in v1.4 and later."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"token_auth\": {\n  \"created_at\": \"2020-01-26T20:07:15.935Z\",\n  \"enabled\": true,\n  \"stream_target_id\": \"PblTJm1t\",\n  \"trusted_shared_secret\": \"499602D2\",\n  \"updated_at\": \"2020-01-28T15:15:01.935Z\"\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"token_auth\": {\n        \"enabled\": true,\n        \"trusted_shared_secret\": \"499602D2\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/:stream_target_id/token_auth",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														":stream_target_id",
														"token_auth"
													],
													"variable": [
														{
															"key": "stream_target_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "wowza (Sunset)",
					"item": [
						{
							"name": "{id} (Sunset)",
							"item": [
								{
									"name": "(Sunset) Fetch a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The GET stream_targets/wowza/{id} operation is sunset and no longer available in v1.4 and later. To retrieve a single Wowza CDN on Akamai stream target, use GET stream_targets/akamai/{id}."
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_wowza\": {\n  \"created_at\": \"2020-01-25T20:07:15.927Z\",\n  \"name\": \"My Wowza Stream Target\",\n  \"provider\": \"akamai_cupertino\",\n  \"use_secure_ingest\": false,\n  \"use_cors\": false,\n  \"stream_name\": \"9a00105a\",\n  \"primary_url\": \"http://post.wowzasandbox3-i.akamaihd.net/252232/9a00105a\",\n  \"hls_playback_url\": \"https://wowzasandbox3-i.akamaihd.net/hls/live/252232/9a00105a/playlist.m3u8\",\n  \"connection_code\": \"456fcc\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.927Z\",\n  \"updated_at\": \"2020-01-28T16:26:04.927Z\"\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Update a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"<string>\",\n        \"provider\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The PATCH stream_targets/wowza/{id} operation is sunset and no longer available in v1.4 and later. To update a Wowza CDN on Akamai stream target, use PATCH stream_targets/akamai/{id}."
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target_wowza\": {\n  \"created_at\": \"2020-01-25T20:07:15.927Z\",\n  \"name\": \"My Updated Wowza Stream Target\",\n  \"provider\": \"akamai_cupertino\",\n  \"use_secure_ingest\": false,\n  \"use_cors\": false,\n  \"stream_name\": \"9a00105a\",\n  \"primary_url\": \"http://post.wowzasandbox3-i.akamaihd.net/252232/9a00105a\",\n  \"hls_playback_url\": \"https://wowzasandbox3-i.akamaihd.net/hls/live/252232/9a00105a/playlist.m3u8\",\n  \"connection_code\": \"456fcc\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.927Z\",\n  \"updated_at\": \"2020-01-28T00:05:40.927Z\"\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Updated Wowza Stream Target\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "(Sunset) Delete a Wowza stream target",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "The DELETE stream_targets/wowza/{id} operation is sunset and no longer available in v1.4 and later. To delete a Wowza CDN on Akamai stream target, use DELETE stream_targets/akamai/{id}."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/stream_targets/wowza/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"stream_targets",
														"wowza",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "(Sunset) Create a Wowza stream target",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"<string>\",\n        \"location\": \"<string>\",\n        \"provider\": \"<string>\",\n        \"use_cors\": \"<boolean>\",\n        \"use_secure_ingest\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/stream_targets/wowza",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"wowza"
									]
								},
								"description": "The POST stream_targets/wowza operation is sunset and no longer available in v1.4 and later. To create a Wowza CDN on Akamai stream target, use POST stream_targets/akamai."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Wowza Stream Target\",\n        \"location\": \"eu_germany\",\n        \"provider\": \"akamai\",\n        \"use_cors\": true,\n        \"use_secure_ingest\": true\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_target_wowza\": {\n  \"created_at\": \"2020-01-25T20:07:15.927Z\",\n  \"name\": \"My Wowza Stream Target\",\n  \"provider\": \"akamai_cupertino\",\n  \"use_secure_ingest\": false,\n  \"use_cors\": false,\n  \"stream_name\": \"9a00105a\",\n  \"primary_url\": \"http://post.wowzasandbox3-i.akamaihd.net/252232/9a00105a\",\n  \"hls_playback_url\": \"https://wowzasandbox3-i.akamaihd.net/hls/live/252232/9a00105a/playlist.m3u8\",\n  \"connection_code\": \"456fcc\",\n  \"connection_code_expires_at\": \"2020-01-29T20:07:15.927Z\",\n  \"updated_at\": \"2020-01-28T16:26:04.927Z\"\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Wowza Stream Target\",\n        \"location\": \"eu_germany\",\n        \"provider\": \"akamai\",\n        \"use_cors\": true,\n        \"use_secure_ingest\": true\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stream_target_wowza\": {\n        \"name\": \"My Wowza Stream Target\",\n        \"location\": \"eu_germany\",\n        \"provider\": \"akamai\",\n        \"use_cors\": true,\n        \"use_secure_ingest\": true\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "(Sunset) Fetch all Wowza stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stream_targets/wowza?page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets",
										"wowza"
									],
									"query": [
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "The GET stream_targets/wowza operation is sunset and no longer available in v1.4 and later. To retrieve Wowza CDN on Akamai stream targets, use GET stream_targets/akamai."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/stream_targets/wowza?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stream_targets",
												"wowza"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_targets_wowza\": [\n  {\n   \"created_at\": \"2020-01-25T20:07:15.924Z\",\n   \"name\": \"My Wowza Stream Target\",\n   \"updated_at\": \"2020-01-28T02:59:10.924Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.924Z\",\n   \"name\": \"My Second Wowza Stream Target\",\n   \"updated_at\": \"2020-01-28T04:42:23.924Z\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fetch all stream targets",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stream_targets?page={{filter_page}}&per_page={{filter_per_page}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stream_targets"
							],
							"query": [
								{
									"key": "page",
									"value": "{{filter_page}}",
									"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "per_page",
									"value": "{{filter_per_page}}",
									"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
								}
							]
						},
						"description": "This operation lists limited details for custom stream targets, ultra low latency stream targets, Wowza CDN on Akamai stream targets, and Wowza CDN on Fastly stream targets. For detailed information, fetch a single stream target of a specific type."
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stream_targets?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stream_targets?page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stream_targets"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"stream_targets\": [\n  {\n   \"created_at\": \"2020-01-26T20:07:15.922Z\",\n   \"name\": \"My RTMP Stream Target\",\n   \"type\": \"wowza\",\n   \"updated_at\": \"2020-01-28T10:01:54.922Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.922Z\",\n   \"name\": \"My HLS Push Stream Target\",\n   \"type\": \"custom\",\n   \"updated_at\": \"2020-01-27T19:09:20.922Z\"\n  },\n  {\n   \"created_at\": \"2020-01-25T20:07:15.922Z\",\n   \"name\": \"My Ultra Low Latency Stream Target\",\n   \"type\": \"ull\",\n   \"updated_at\": \"2020-01-28T11:25:18.922Z\"\n  }\n ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transcoders",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Fetch a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation shows the details of a specific transcoder."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"application_name\": \"app-3757\",\n  \"billing_mode\": \"pay_as_you_go\",\n  \"broadcast_location\": \"us_central_iowa\",\n  \"buffer_size\": 4000,\n  \"closed_caption_type\": \"cea\",\n  \"created_at\": \"2020-01-25T20:07:15.938Z\",\n  \"delivery_method\": \"push\",\n  \"delivery_protocols\": [\n   \"rtmp\",\n   \"rtsp\",\n   \"wowz\"\n  ],\n  \"description\": \"My Transcoder Description\",\n  \"direct_playback_urls\": [\n   {\n    \"rtmp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"rtsp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"wowz\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   }\n  ],\n  \"disable_authentication\": false,\n  \"domain_name\": \"f92334.entrypoint.cloud.wowza.com\",\n  \"idle_timeout\": 1200,\n  \"low_latency\": false,\n  \"name\": \"My PAYG Transcoder\",\n  \"outputs\": [\n   {}\n  ],\n  \"password\": \"82e0e971\",\n  \"protocol\": \"rtmp\",\n  \"recording\": true,\n  \"source_port\": 1935,\n  \"stream_extension\": \".sdp\",\n  \"stream_name\": \"10eb0ed8\",\n  \"stream_smoother\": false,\n  \"suppress_stream_target_start\": false,\n  \"transcoder_type\": \"transcoded\",\n  \"updated_at\": \"2020-01-28T14:33:52.938Z\",\n  \"username\": \"client2\",\n  \"watermark\": true,\n  \"watermark_height\": 80,\n  \"watermark_image_url\": \"https://prod.s3.amazonaws.com/uploads/transcoder/watermark_image/12345/4baa13.jpg\",\n  \"watermark_opacity\": 75,\n  \"watermark_position\": \"top-right\",\n  \"watermark_width\": 100\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Update a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transcoder\": {\n        \"name\": \"<string>\",\n        \"protocol\": \"<string>\",\n        \"delivery_method\": \"<string>\",\n        \"broadcast_location\": \"<string>\",\n        \"buffer_size\": \"<integer>\",\n        \"closed_caption_type\": \"<string>\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"disable_authentication\": \"<boolean>\",\n        \"idle_timeout\": \"<integer>\",\n        \"low_latency\": \"<boolean>\",\n        \"password\": \"<string>\",\n        \"play_maximum_connections\": \"<integer>\",\n        \"recording\": \"<boolean>\",\n        \"remove_watermark_image\": \"<boolean>\",\n        \"source_url\": \"<string>\",\n        \"stream_extension\": \"<string>\",\n        \"stream_smoother\": \"<boolean>\",\n        \"stream_source_id\": \"<string>\",\n        \"suppress_stream_target_start\": \"<boolean>\",\n        \"username\": \"<string>\",\n        \"watermark\": \"<boolean>\",\n        \"watermark_height\": \"<integer>\",\n        \"watermark_image\": \"<string>\",\n        \"watermark_opacity\": \"<integer>\",\n        \"watermark_position\": \"<string>\",\n        \"watermark_width\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation updates a transcoder."
							},
							"response": [
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"remove_watermark_image\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"remove_watermark_image\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"remove_watermark_image\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"remove_watermark_image\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"remove_watermark_image\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"remove_watermark_image\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"application_name\": \"app-3757\",\n  \"billing_mode\": \"pay_as_you_go\",\n  \"broadcast_location\": \"us_central_iowa\",\n  \"buffer_size\": 4000,\n  \"closed_caption_type\": \"cea\",\n  \"created_at\": \"2020-01-25T20:07:15.938Z\",\n  \"delivery_method\": \"push\",\n  \"delivery_protocols\": [\n   \"rtmp\",\n   \"rtsp\",\n   \"wowz\"\n  ],\n  \"description\": \"My Transcoder Description\",\n  \"direct_playback_urls\": [\n   {\n    \"rtmp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"rtsp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"wowz\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   }\n  ],\n  \"disable_authentication\": false,\n  \"domain_name\": \"f92334.entrypoint.cloud.wowza.com\",\n  \"idle_timeout\": 1200,\n  \"low_latency\": false,\n  \"name\": \"My PAYG Transcoder\",\n  \"outputs\": [\n   {}\n  ],\n  \"password\": \"82e0e971\",\n  \"protocol\": \"rtmp\",\n  \"recording\": true,\n  \"source_port\": 1935,\n  \"stream_extension\": \".sdp\",\n  \"stream_name\": \"10eb0ed8\",\n  \"stream_smoother\": false,\n  \"suppress_stream_target_start\": false,\n  \"transcoder_type\": \"transcoded\",\n  \"updated_at\": \"2020-01-28T14:33:52.938Z\",\n  \"username\": \"client2\",\n  \"watermark\": true,\n  \"watermark_height\": 80,\n  \"watermark_image_url\": \"https://prod.s3.amazonaws.com/uploads/transcoder/watermark_image/12345/4baa13.jpg\",\n  \"watermark_opacity\": 75,\n  \"watermark_position\": \"top-right\",\n  \"watermark_width\": 100\n }\n}"
								}
							]
						},
						{
							"name": "Delete a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation deletes a transcoder, including all of its assigned output renditions and stream targets."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "No Content",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Enable a transcoder's stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/enable_all_stream_targets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"enable_all_stream_targets"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation enables all of the stream targets assigned to a specific transcoder."
							},
							"response": [
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/enable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"enable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/enable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"enable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/enable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"enable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"stream_targets\": {\n   \"state\": \"enabled\"\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/enable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"enable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/enable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"enable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/enable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"enable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Disable a transcoder's stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/disable_all_stream_targets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"disable_all_stream_targets"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation disables all of the stream targets assigned to a specific transcoder."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/disable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"disable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/disable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"disable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/disable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"disable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"stream_targets\": {\n   \"state\": \"enabled\"\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/disable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"disable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/disable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"disable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/disable_all_stream_targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"disable_all_stream_targets"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Start a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/start",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"start"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation starts a transcoder."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"state\": \"starting\",\n  \"uptime_id\": \"abcd1234\"\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Stop a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/stop",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"stop"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation stops a transcoder."
							},
							"response": [
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"state\": \"starting\",\n  \"uptime_id\": \"abcd1234\"\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Reset a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"reset"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation resets a transcoder."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"state\": \"resetting\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"reset"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Start recording",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/start_recording",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"start_recording"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation starts the recording of a transcoder after the transcoder has started.<br /><br /> If you want the recording to start and stop automatically when you start or stop the transcoder instead, set _recording_ to **true** when you [Create a transcoder](#operation/createTranscoder) or [Update a transcoder](#operation/updateTranscoder)."
							},
							"response": [
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"recording\": {\n   \"state\": \"started\"\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/start_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"start_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Stop recording",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/stop_recording",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"stop_recording"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation stops the recording of a transcoder before the transcoder has stopped. Wowza Streaming Cloud begins converting the recording to an MP4 file after the transcoder has stopped. You can use this operation to manually stop recording even if _recording_ is set to **true** on the transcoder, meaning the recording was automatically started at transcoder start.<br /><br />If you want the recording to start and stop automatically when you start and stop the transcoder, set _recording_ to **true** when you [Create a transcoder](#operation/createTranscoder) or [Update a transcoder](#operation/updateTranscoder) and then don't use the manual stop recording operation."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"recording\": {\n   \"state\": \"stopped\"\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stop_recording",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stop_recording"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch a transcoder's recordings",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/recordings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"recordings"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation shows limited details of all of the recordings for a specific transcoder. For detailed information about a recording, use the recording ID to [Fetch a recording](#operation/showRecording)."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"recordings"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"recordings"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"recordings"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"recordings"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"recordings"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"recordings\": [\n  {\n   \"created_at\": \"2020-01-26T20:07:15.803Z\",\n   \"id\": \"4Jjzstdt\",\n   \"reason\": \"\",\n   \"state\": \"completed\",\n   \"transcoder_id\": \"bjaplmrw\",\n   \"updated_at\": \"2020-01-28T08:20:40.803Z\"\n  },\n  {\n   \"created_at\": \"2020-01-26T20:07:15.803Z\",\n   \"id\": \"4Jjzstdt\",\n   \"reason\": \"\",\n   \"state\": \"completed\",\n   \"transcoder_id\": \"bjaplmrw\",\n   \"updated_at\": \"2020-01-28T08:20:40.803Z\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Fetch transcoder's schedules",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/schedules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"schedules"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation shows the details of all of the schedules for a specific transcoder."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"schedules"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"schedules"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"schedules"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"schedules"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"schedules\": [\n  {\n   \"action_type\": \"start_stop\",\n   \"begins_at\": \"2020-01-29T00:00:00.000Z\",\n   \"created_at\": \"2020-01-26T20:07:15.805Z\",\n   \"end_repeat\": \"2020-02-28\",\n   \"ends_at\": \"2020-02-28T23:59:59.999Z\",\n   \"name\": \"Scheduled recurring start for my camera\",\n   \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n   \"recurrence_type\": \"recur\",\n   \"start_repeat\": \"2020-01-29\",\n   \"state\": \"disabled\",\n   \"transcoder_id\": \"VGB21JFJ\",\n   \"transcoder_name\": \"My Camera\",\n   \"updated_at\": \"2020-01-28T18:39:10.805Z\"\n  },\n  {\n   \"action_type\": \"start_stop\",\n   \"begins_at\": \"2020-01-29T00:00:00.000Z\",\n   \"created_at\": \"2020-01-26T20:07:15.805Z\",\n   \"end_repeat\": \"2020-02-28\",\n   \"ends_at\": \"2020-02-28T23:59:59.999Z\",\n   \"name\": \"Scheduled recurring start for my camera\",\n   \"recurrence_data\": \"monday,tuesday,wednesday,thursday,friday\",\n   \"recurrence_type\": \"recur\",\n   \"start_repeat\": \"2020-01-29\",\n   \"state\": \"disabled\",\n   \"transcoder_id\": \"VGB21JFJ\",\n   \"transcoder_name\": \"My Camera\",\n   \"updated_at\": \"2020-01-28T18:39:10.805Z\"\n  }\n ]\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"schedules"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch the thumbnail URL of a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/thumbnail_url",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"thumbnail_url"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation shows the thumbnail URL of a started transcoder."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"thumbnail_url\": \"https://cloud.wowza.com/proxy/stats/?target=10.11.12.13&app=app-79b8&stream=99b62146@130135.stream&media=json\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/thumbnail_url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"thumbnail_url"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch the state and uptime ID of a transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/state",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"state"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation shows the current state and uptime ID of a transcoder."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"ip_address\": \"1.2.3.4\",\n  \"state\": \"started\",\n  \"uptime_id\": \"abcd1234\"\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/state",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"state"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch statistics for a current transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transcoders/:id/stats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders",
										":id",
										"stats"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a **status**, **text** (description), **units**, and **value**."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"audio_codec\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"aac\"\n  },\n  \"bits_in_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"Kbps\",\n   \"value\": 317.3\n  },\n  \"bits_out_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"Kbps\",\n   \"value\": 856\n  },\n  \"bytes_in_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"KBps\",\n   \"value\": 317.3\n  },\n  \"bytes_out_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"KBps\",\n   \"value\": 856\n  },\n  \"configured_bytes_out_rate\": {\n   \"status\": \"warning\",\n   \"text\": \"Outbound bitrate is lower than the configured bitrate. There might be a problem with the stream targets.\",\n   \"units\": \"Kbps\",\n   \"value\": 8192\n  },\n  \"connected\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"Yes\"\n  },\n  \"frame_size\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured frame size is different from what Wowza Streaming Cloud is receiving from the source: 1280x720.\",\n   \"units\": \"\",\n   \"value\": \"1280x720\"\n  },\n  \"frame_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"FPS\",\n   \"value\": 30\n  },\n  \"height\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured height is different from what Wowza Streaming Cloud is receiving from the source: 720.\",\n   \"units\": \"px\",\n   \"value\": 720\n  },\n  \"keyframe_interval\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"GOP\",\n   \"value\": 69\n  },\n  \"stream_target_status_OUTPUTIDX_STREAMTARGETIDX\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"Active\"\n  },\n  \"unique_views\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"%\",\n   \"value\": 1030\n  },\n  \"video_codec\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"avc1\"\n  },\n  \"width\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured width is different from what Wowza Streaming Cloud is receiving from the source: 1280.\",\n   \"units\": \"px\",\n   \"value\": 1280\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:id/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":id",
												"stats"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{transcoder id}",
					"item": [
						{
							"name": "uptimes",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "metrics",
											"item": [
												{
													"name": "Fetch current stream health metrics for an active transcoder",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/current?fields={{filter_fields}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"uptimes",
																":id",
																"metrics",
																"current"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "{{filter_fields}}",
																	"description": "A comma-separated list of fields to return."
																}
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "id",
																	"value": "{{transcoderUptimeRecordId}}",
																	"description": "The unique alphanumeric string that identifies the uptime record."
																}
															]
														},
														"description": "This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder."
													},
													"response": [
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/current?fields=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"current"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Success",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/current?fields=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"current"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"current\": {\n  \"audio_codec\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"aac\"\n  },\n  \"bits_in_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"Kbps\",\n   \"value\": 317.3\n  },\n  \"bits_out_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"Kbps\",\n   \"value\": 856\n  },\n  \"bytes_in_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"KBps\",\n   \"value\": 317.3\n  },\n  \"bytes_out_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"KBps\",\n   \"value\": 856\n  },\n  \"configured_bytes_out_rate\": {\n   \"status\": \"warning\",\n   \"text\": \"Outbound bitrate is lower than the configured bitrate. There might be a problem with the stream targets.\",\n   \"value\": 8192,\n   \"units\": \"Kbps\"\n  },\n  \"connected\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"Yes\"\n  },\n  \"frame_size\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured frame size is different from what Wowza Streaming Cloud is receiving from the source: 1280x720.\",\n   \"units\": \"\",\n   \"value\": \"1280x720\"\n  },\n  \"frame_rate\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"FPS\",\n   \"value\": 30\n  },\n  \"height\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured height is different from what Wowza Streaming Cloud is receiving from the source: 720.\",\n   \"units\": \"px\",\n   \"value\": 720\n  },\n  \"keyframe_interval\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"GOP\",\n   \"value\": 69\n  },\n  \"stream_target_status_OUTPUTIDX_STREAMTARGETIDX\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"Active\"\n  },\n  \"unique_views\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"%\",\n   \"value\": 1030\n  },\n  \"video_codec\": {\n   \"status\": \"normal\",\n   \"text\": \"\",\n   \"units\": \"\",\n   \"value\": \"avc1\"\n  },\n  \"width\": {\n   \"status\": \"warning\",\n   \"text\": \"Configured width is different from what Wowza Streaming Cloud is receiving from the source: 1280.\",\n   \"units\": \"px\",\n   \"value\": 1280\n  }\n },\n \"limits\": {\n  \"fields\": [\n   \"audio_codec\",\n   \"bits_in_rate\",\n   \"bits_out_rate\",\n   \"bytes_in_rate\",\n   \"bytes_out_rate\",\n   \"configured_bytes_out_rate\",\n   \"connected\",\n   \"frame_size\",\n   \"frame_rate\",\n   \"height\",\n   \"width\",\n   \"keyframe_interval\",\n   \"unique_views\",\n   \"video_codec\",\n   \"width\",\n   \"stream_target_status_OUTPUTIDX_STREAMTARGETIDX\"\n  ]\n }\n}"
														},
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/current?fields=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"current"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/current?fields=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"current"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Gone",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/current?fields=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"current"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Fetch historic stream health metrics for a transcoder",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/historic?fields={{filter_fields}}&from={{filter_datetime_from}}&to={{filter_datetime_to}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"uptimes",
																":id",
																"metrics",
																"historic"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "{{filter_fields}}",
																	"description": "A comma-separated list of fields to return."
																},
																{
																	"key": "from",
																	"value": "{{filter_datetime_from}}",
																	"description": "The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of **YYYY-MM-DDTHH:MM:SSZ** where **HH** is a 24-hour clock in UTC."
																},
																{
																	"key": "to",
																	"value": "{{filter_datetime_to}}",
																	"description": "The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of **YYYY-MM-DDTHH:MM:SSZ** where **HH** is a 24-hour clock in UTC."
																}
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "id",
																	"value": "{{transcoderUptimeRecordId}}",
																	"description": "The unique alphanumeric string that identifies the uptime record."
																}
															]
														},
														"description": "This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds."
													},
													"response": [
														{
															"name": "Gone",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/historic?fields=<string>&from=<string>&to=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"historic"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		},
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "to",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/historic?fields=<string>&from=<string>&to=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"historic"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		},
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "to",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/historic?fields=<string>&from=<string>&to=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"historic"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		},
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "to",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Success",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/historic?fields=<string>&from=<string>&to=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"historic"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		},
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "to",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"historic\": [\n  {\n   \"audio_codec\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"\",\n    \"value\": \"aac\"\n   },\n   \"bits_in_rate\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"Kbps\",\n    \"value\": 317.3\n   },\n   \"bits_out_rate\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"Kbps\",\n    \"value\": 856\n   },\n   \"frame_rate\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"FPS\",\n    \"value\": 30\n   },\n   \"height\": {\n    \"status\": \"warning\",\n    \"text\": \"Configured height is different from what Wowza Streaming Cloud is receiving from the source: 720.\",\n    \"units\": \"px\",\n    \"value\": 720\n   },\n   \"keyframe_interval\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"GOP\",\n    \"value\": 69\n   },\n   \"video_codec\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"\",\n    \"value\": \"avc1\"\n   },\n   \"width\": {\n    \"status\": \"warning\",\n    \"text\": \"Configured width is different from what Wowza Streaming Cloud is receiving from the source: 1280.\",\n    \"units\": \"px\",\n    \"value\": 1280\n   },\n   \"created_at\": \"2017-07-06T14:20:00Z\"\n  },\n  {\n   \"audio_codec\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"\",\n    \"value\": \"aac\"\n   },\n   \"bits_in_rate\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"Kbps\",\n    \"value\": 317.3\n   },\n   \"bits_out_rate\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"Kbps\",\n    \"value\": 856\n   },\n   \"frame_rate\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"FPS\",\n    \"value\": 30\n   },\n   \"height\": {\n    \"status\": \"warning\",\n    \"text\": \"Configured height is different from what Wowza Streaming Cloud is receiving from the source: 720.\",\n    \"units\": \"px\",\n    \"value\": 720\n   },\n   \"keyframe_interval\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"GOP\",\n    \"value\": 69\n   },\n   \"video_codec\": {\n    \"status\": \"normal\",\n    \"text\": \"\",\n    \"units\": \"\",\n    \"value\": \"avc1\"\n   },\n   \"width\": {\n    \"status\": \"warning\",\n    \"text\": \"Configured width is different from what Wowza Streaming Cloud is receiving from the source: 1280.\",\n    \"units\": \"px\",\n    \"value\": 1280\n   },\n   \"created_at\": \"2017-07-06T14:20:20Z\"\n  }\n ],\n \"limits\": {\n  \"fields\": [\n   \"audio_codec\",\n   \"bits_in_rate\",\n   \"bits_out_rate\",\n   \"frame_rate\",\n   \"height\",\n   \"keyframe_interval\",\n   \"width\",\n   \"video_codec\"\n  ],\n  \"from\": \"2017-07-06T14:20:00Z\",\n  \"to\": \"2017-07-06T14:20:20Z\"\n }\n}"
														},
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id/metrics/historic?fields=<string>&from=<string>&to=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"uptimes",
																		":id",
																		"metrics",
																		"historic"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "<string>"
																		},
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "to",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Fetch an uptime record",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"uptimes",
														":id"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "id",
															"value": "{{transcoderUptimeRecordId}}",
															"description": "The unique alphanumeric string that identifies the uptime record."
														}
													]
												},
												"description": "This operation shows the details of a specific uptime record for a specific transcoder. An *uptime record* identifies a transcoding session."
											},
											"response": [
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"uptimes",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"uptimes",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"uptime\": {\n  \"billed\": false,\n  \"created_at\": \"2017-07-06T14:22:00Z\",\n  \"running\": true,\n  \"started_at\": \"2017-07-06T14:22:00Z\",\n  \"transcoder_id\": \"2adffc17\",\n  \"updated_at\": \"2017-07-06T14:22:00Z\"\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"uptimes",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"uptimes",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"uptimes",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Fetch all uptime records for a transcoder",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes?page={{filter_page}}&per_page={{filter_per_page}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":transcoder_id",
												"uptimes"
											],
											"query": [
												{
													"key": "page",
													"value": "{{filter_page}}",
													"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
												},
												{
													"key": "per_page",
													"value": "{{filter_per_page}}",
													"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
												}
											],
											"variable": [
												{
													"key": "transcoder_id",
													"value": "{{transcoderId}}",
													"description": "The unique alphanumeric string that identifies the transcoder."
												}
											]
										},
										"description": "This operation shows all of the uptime records for a specific transcoder. An *uptime record* identifies a specific transcoding session."
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes?page=<integer>&per_page=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"uptimes"
													],
													"query": [
														{
															"key": "page",
															"value": "<integer>"
														},
														{
															"key": "per_page",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes?page=<integer>&per_page=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"uptimes"
													],
													"query": [
														{
															"key": "page",
															"value": "<integer>"
														},
														{
															"key": "per_page",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes?page=<integer>&per_page=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"uptimes"
													],
													"query": [
														{
															"key": "page",
															"value": "<integer>"
														},
														{
															"key": "per_page",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes?page=<integer>&per_page=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"uptimes"
													],
													"query": [
														{
															"key": "page",
															"value": "<integer>"
														},
														{
															"key": "per_page",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"uptimes\": [\n  {\n   \"billed\": false,\n   \"created_at\": \"2017-07-06T14:22:00Z\",\n   \"running\": true,\n   \"started_at\": \"2017-07-06T14:22:00Z\",\n   \"transcoder_id\": \"2adffc17\",\n   \"updated_at\": \"2017-07-06T14:22:00Z\"\n  },\n  {\n   \"billed\": true,\n   \"created_at\": \"2017-07-08T14:22:00Z\",\n   \"ended_at\": \"2017-07-08T16:40:00Z\",\n   \"running\": false,\n   \"started_at\": \"2017-07-08T14:22:00Z\",\n   \"transcoder_id\": \"ff9l4838\",\n   \"updated_at\": \"2017-07-08T16:40:00Z\"\n  }\n ]\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/uptimes?page=<integer>&per_page=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"uptimes"
													],
													"query": [
														{
															"key": "page",
															"value": "<integer>"
														},
														{
															"key": "per_page",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "outputs",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Fetch an output",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs",
														":id"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "id",
															"value": "{{transcoderOutputId}}",
															"description": "The unique alphanumeric string that identifies the output rendition."
														}
													]
												},
												"description": "This operation shows the details of a specific output rendition for a specific transcoder."
											},
											"response": [
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"output\": {\n  \"aspect_ratio_height\": 480,\n  \"aspect_ratio_width\": 848,\n  \"bitrate_audio\": 128,\n  \"bitrate_video\": 1600,\n  \"created_at\": \"2020-01-26T20:07:15.760Z\",\n  \"framerate_reduction\": \"1/2\",\n  \"h264_profile\": \"main\",\n  \"keyframes\": \"follow_source\",\n  \"name\": \"Video+Audio=1600+128, main, 848 x 480\",\n  \"output_stream_targets\": [\n   {}\n  ],\n  \"passthrough_audio\": false,\n  \"passthrough_video\": false,\n  \"stream_format\": \"audiovideo\",\n  \"transcoder_id\": \"PblTJm1t\",\n  \"updated_at\": \"2020-01-28T13:23:30.760Z\"\n }\n}"
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Update an output",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"stream_format\": \"<string>\",\n        \"aspect_ratio_height\": \"<integer>\",\n        \"aspect_ratio_width\": \"<integer>\",\n        \"bitrate_audio\": \"<integer>\",\n        \"bitrate_video\": \"<integer>\",\n        \"framerate_reduction\": \"<string>\",\n        \"h264_profile\": \"<string>\",\n        \"keyframes\": \"<string>\",\n        \"passthrough_audio\": \"<boolean>\",\n        \"passthrough_video\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs",
														":id"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "id",
															"value": "{{transcoderOutputId}}",
															"description": "The unique alphanumeric string that identifies the output rendition."
														}
													]
												},
												"description": "This operation updates an output rendition."
											},
											"response": [
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unprocessable Entity",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
													"code": 422,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Success",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"output\": {\n  \"aspect_ratio_height\": 480,\n  \"aspect_ratio_width\": 848,\n  \"bitrate_audio\": 128,\n  \"bitrate_video\": 1600,\n  \"created_at\": \"2020-01-26T20:07:15.760Z\",\n  \"framerate_reduction\": \"1/2\",\n  \"h264_profile\": \"main\",\n  \"keyframes\": \"follow_source\",\n  \"name\": \"Video+Audio=1600+128, main, 848 x 480\",\n  \"output_stream_targets\": [\n   {}\n  ],\n  \"passthrough_audio\": false,\n  \"passthrough_video\": false,\n  \"stream_format\": \"audiovideo\",\n  \"transcoder_id\": \"PblTJm1t\",\n  \"updated_at\": \"2020-01-28T13:23:30.760Z\"\n }\n}"
												}
											]
										},
										{
											"name": "Delete an output",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs",
														":id"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "id",
															"value": "{{transcoderOutputId}}",
															"description": "The unique alphanumeric string that identifies the output rendition."
														}
													]
												},
												"description": "This operation deletes an output, including all of its assigned targets."
											},
											"response": [
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unprocessable Entity",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
													"code": 422,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "No Content",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "{output id}/output stream targets",
									"item": [
										{
											"name": "{stream target id}",
											"item": [
												{
													"name": "Fetch an output stream target",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets",
																":stream_target_id"
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "output_id",
																	"value": "{{transcoderOutputId}}",
																	"description": "The unique alphanumeric string that identifies the output rendition."
																},
																{
																	"key": "stream_target_id",
																	"value": "{{streamTargetId}}",
																	"description": "The unique alphanumeric string that identifies the stream target."
																}
															]
														},
														"description": "This operation shows the details of an output stream target."
													},
													"response": [
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Success",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"output_stream_target\": {\n  \"stream_target_id\": \"QvvJYJjk\",\n  \"stream_target\": {\n   \"name\": \"My provisioned RTMP Stream Target\",\n   \"type\": \"wowza\",\n   \"created_at\": \"2020-01-26T20:07:15.762Z\",\n   \"updated_at\": \"2020-01-27T23:41:07.763Z\"\n  }\n }\n}"
														},
														{
															"name": "Gone",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Update an output stream target",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"<string>\",\n        \"use_stream_target_backup_url\": \"<boolean>\"\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets",
																":stream_target_id"
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "output_id",
																	"value": "{{transcoderOutputId}}",
																	"description": "The unique alphanumeric string that identifies the output rendition."
																},
																{
																	"key": "stream_target_id",
																	"value": "{{streamTargetId}}",
																	"description": "The unique alphanumeric string that identifies the stream target."
																}
															]
														},
														"description": "This operation updates an output stream target."
													},
													"response": [
														{
															"name": "Success",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"output_stream_target\": {\n  \"stream_target_id\": \"QvvJYJjk\",\n  \"stream_target\": {\n   \"name\": \"My provisioned RTMP Stream Target\",\n   \"type\": \"wowza\",\n   \"created_at\": \"2020-01-26T20:07:15.762Z\",\n   \"updated_at\": \"2020-01-27T23:41:07.763Z\"\n  }\n }\n}"
														},
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unprocessable Entity",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
															"code": 422,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Gone",
															"originalRequest": {
																"method": "PATCH",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Delete an output stream target",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets",
																":stream_target_id"
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "output_id",
																	"value": "{{transcoderOutputId}}",
																	"description": "The unique alphanumeric string that identifies the output rendition."
																},
																{
																	"key": "stream_target_id",
																	"value": "{{streamTargetId}}",
																	"description": "The unique alphanumeric string that identifies the stream target."
																}
															]
														},
														"description": "This operation deletes an output stream target, including all of its assigned targets."
													},
													"response": [
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Gone",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unprocessable Entity",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
															"code": 422,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "No Content",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Enable an output stream target",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets",
																":stream_target_id",
																"enable"
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "output_id",
																	"value": "{{transcoderOutputId}}",
																	"description": "The unique alphanumeric string that identifies the output rendition."
																},
																{
																	"key": "stream_target_id",
																	"value": "{{streamTargetId}}",
																	"description": "The unique alphanumeric string that identifies the stream target."
																}
															]
														},
														"description": "This operation enables an output stream target."
													},
													"response": [
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"enable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unprocessable Entity",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"enable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
															"code": 422,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Gone",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"enable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"enable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Success",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"enable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"stream_target\": {\n  \"state\": \"enabled\"\n }\n}"
														},
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/enable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"enable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														}
													]
												},
												{
													"name": "Disable an output stream target",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets",
																":stream_target_id",
																"disable"
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "output_id",
																	"value": "{{transcoderOutputId}}",
																	"description": "The unique alphanumeric string that identifies the output rendition."
																},
																{
																	"key": "stream_target_id",
																	"value": "{{streamTargetId}}",
																	"description": "The unique alphanumeric string that identifies the stream target."
																}
															]
														},
														"description": "This operation disables an output stream target."
													},
													"response": [
														{
															"name": "Unprocessable Entity",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"disable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
															"code": 422,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Gone",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"disable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"disable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"disable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"disable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Success",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/disable",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"disable"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"stream_target\": {\n  \"state\": \"disabled\"\n }\n}"
														}
													]
												},
												{
													"name": "Restart an output stream target",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "wsc-access-key",
																"value": "{{WscAccessKey}}",
																"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
																"type": "text"
															},
															{
																"key": "wsc-timestamp",
																"value": "{{epochTimeStamp}}",
																"description": "Unix epoch timestamp.",
																"type": "text"
															},
															{
																"key": "wsc-signature",
																"value": "{{WscSignature}}",
																"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/restart",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets",
																":stream_target_id",
																"restart"
															],
															"variable": [
																{
																	"key": "transcoder_id",
																	"value": "{{transcoderId}}",
																	"description": "The unique alphanumeric string that identifies the transcoder."
																},
																{
																	"key": "output_id",
																	"value": "{{transcoderOutputId}}",
																	"description": "The unique alphanumeric string that identifies the output rendition."
																},
																{
																	"key": "stream_target_id",
																	"value": "{{streamTargetId}}",
																	"description": "The unique alphanumeric string that identifies the stream target."
																}
															]
														},
														"description": "This operation restarts an output stream target."
													},
													"response": [
														{
															"name": "Unauthorized",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/restart",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"restart"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Unprocessable Entity",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/restart",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"restart"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
															"code": 422,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Success",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/restart",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"restart"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"stream_target\": {\n  \"state\": \"restarted\"\n }\n}"
														},
														{
															"name": "Gone",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/restart",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"restart"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Forbidden",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/restart",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"restart"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														},
														{
															"name": "Not Found",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets/:stream_target_id/restart",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"transcoders",
																		":transcoder_id",
																		"outputs",
																		":output_id",
																		"output_stream_targets",
																		":stream_target_id",
																		"restart"
																	],
																	"variable": [
																		{
																			"key": "transcoder_id"
																		},
																		{
																			"key": "output_id"
																		},
																		{
																			"key": "stream_target_id"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
														}
													]
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create an output stream target",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"<string>\",\n        \"use_stream_target_backup_url\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs",
														":output_id",
														"output_stream_targets"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "output_id",
															"value": "{{transcoderOutputId}}",
															"description": "The unique alphanumeric string that identifies the output rendition."
														}
													]
												},
												"description": "This operation creates an output stream target. Ultra low latency stream targets can't be added to output renditions."
											},
											"response": [
												{
													"name": "Unprocessable Entity",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
													"code": 422,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Success",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"output_stream_target\": {\n        \"stream_target_id\": \"1234abcd\",\n        \"use_stream_target_backup_url\": true\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"output_stream_target\": {\n  \"stream_target_id\": \"QvvJYJjk\",\n  \"stream_target\": {\n   \"name\": \"My provisioned RTMP Stream Target\",\n   \"type\": \"wowza\",\n   \"created_at\": \"2020-01-26T20:07:15.762Z\",\n   \"updated_at\": \"2020-01-27T23:41:07.763Z\"\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Fetch all output stream targets of an output of a transcoder",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs",
														":output_id",
														"output_stream_targets"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "output_id",
															"value": "{{transcoderOutputId}}",
															"description": "The unique alphanumeric string that identifies the output rendition."
														}
													]
												},
												"description": "This operation shows the details of all of the output stream targets of an output of a transcoder."
											},
											"response": [
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"output_stream_targets\": [\n  {\n   \"stream_target_id\": \"QvvJYJjk\",\n   \"stream_target\": {\n    \"name\": \"My provisioned RTMP Stream Target\",\n    \"type\": \"wowza\",\n    \"created_at\": \"2020-01-26T20:07:15.762Z\",\n    \"updated_at\": \"2020-01-28T02:36:51.762Z\"\n   }\n  },\n  {\n   \"stream_target_id\": \"R32u8HDk\",\n   \"stream_target\": {\n    \"name\": \"My other provisioned RTMP Stream Target\",\n    \"type\": \"wowza\",\n    \"created_at\": \"2020-01-26T20:07:15.762Z\",\n    \"updated_at\": \"2020-01-27T22:23:39.762Z\"\n   }\n  }\n ]\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs/:output_id/output_stream_targets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"outputs",
																":output_id",
																"output_stream_targets"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "output_id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create an output",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"output\": {\n        \"stream_format\": \"<string>\",\n        \"aspect_ratio_height\": \"<integer>\",\n        \"aspect_ratio_width\": \"<integer>\",\n        \"bitrate_audio\": \"<integer>\",\n        \"bitrate_video\": \"<integer>\",\n        \"framerate_reduction\": \"<string>\",\n        \"h264_profile\": \"<string>\",\n        \"keyframes\": \"<string>\",\n        \"passthrough_audio\": \"<boolean>\",\n        \"passthrough_video\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":transcoder_id",
												"outputs"
											],
											"variable": [
												{
													"key": "transcoder_id",
													"value": "{{transcoderId}}",
													"description": "The unique alphanumeric string that identifies the transcoder."
												}
											]
										},
										"description": "This operation creates an output rendition for a specific transcoder."
									},
									"response": [
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"output\": {\n  \"aspect_ratio_height\": 480,\n  \"aspect_ratio_width\": 848,\n  \"bitrate_audio\": 128,\n  \"bitrate_video\": 1600,\n  \"created_at\": \"2020-01-26T20:07:15.760Z\",\n  \"framerate_reduction\": \"1/2\",\n  \"h264_profile\": \"main\",\n  \"keyframes\": \"follow_source\",\n  \"name\": \"Video+Audio=1600+128, main, 848 x 480\",\n  \"output_stream_targets\": [\n   {}\n  ],\n  \"passthrough_audio\": false,\n  \"passthrough_video\": false,\n  \"stream_format\": \"audiovideo\",\n  \"transcoder_id\": \"PblTJm1t\",\n  \"updated_at\": \"2020-01-28T13:23:30.760Z\"\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"output\": {\n        \"stream_format\": \"audiovideo\",\n        \"aspect_ratio_height\": 480,\n        \"aspect_ratio_width\": 848,\n        \"bitrate_audio\": 128,\n        \"bitrate_video\": 1600,\n        \"framerate_reduction\": \"1/2\",\n        \"h264_profile\": \"main\",\n        \"keyframes\": \"follow_source\",\n        \"passthrough_audio\": false,\n        \"passthrough_video\": false\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Fetch all outputs of a transcoder",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":transcoder_id",
												"outputs"
											],
											"variable": [
												{
													"key": "transcoder_id",
													"value": "{{transcoderId}}",
													"description": "The unique alphanumeric string that identifies the transcoder."
												}
											]
										},
										"description": "This operation shows the details of all of the output renditions of a specific transcoder."
									},
									"response": [
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"outputs\": [\n  {\n   \"aspect_ratio_height\": 480,\n   \"aspect_ratio_width\": 848,\n   \"bitrate_audio\": 128,\n   \"bitrate_video\": 1600,\n   \"created_at\": \"2020-01-26T20:07:15.751Z\",\n   \"framerate_reduction\": \"1/2\",\n   \"h264_profile\": \"main\",\n   \"keyframes\": \"follow_source\",\n   \"name\": \"Video+Audio=1600+128, main, 848 x 480\",\n   \"output_stream_targets\": [\n    {}\n   ],\n   \"passthrough_audio\": false,\n   \"passthrough_video\": false,\n   \"stream_format\": \"audiovideo\",\n   \"transcoder_id\": \"PblTJm1t\",\n   \"updated_at\": \"2020-01-28T00:28:34.751Z\"\n  },\n  {\n   \"created_at\": \"2020-01-26T20:07:15.751Z\",\n   \"name\": \"Video+Audio=Passthrough+Passthrough\",\n   \"output_stream_targets\": [\n    {}\n   ],\n   \"passthrough_audio\": true,\n   \"passthrough_video\": true,\n   \"stream_format\": \"audiovideo\",\n   \"transcoder_id\": \"Yf5lyjCV\",\n   \"updated_at\": \"2020-01-28T08:51:14.751Z\"\n  }\n ]\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/outputs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"outputs"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "properties",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Fetch a property for a transcoder",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties",
														":id"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "id",
															"value": "{{transcoderPropertyId}}",
															"description": "The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset."
														}
													]
												},
												"description": "This operation shows the details of a specific property for a specific transcoder."
											},
											"response": [
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"property\": {\n  \"key\": \"rtpIgnoreProfileLevelId\",\n  \"section\": \"rtsp\",\n  \"value\": true\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										},
										{
											"name": "Delete a transcoder's property",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "wsc-access-key",
														"value": "{{WscAccessKey}}",
														"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
														"type": "text"
													},
													{
														"key": "wsc-timestamp",
														"value": "{{epochTimeStamp}}",
														"description": "Unix epoch timestamp.",
														"type": "text"
													},
													{
														"key": "wsc-signature",
														"value": "{{WscSignature}}",
														"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties",
														":id"
													],
													"variable": [
														{
															"key": "transcoder_id",
															"value": "{{transcoderId}}",
															"description": "The unique alphanumeric string that identifies the transcoder."
														},
														{
															"key": "id",
															"value": "{{transcoderPropertyId}}",
															"description": "The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset."
														}
													]
												},
												"description": "This operation deletes a specific property from a specific transcoder."
											},
											"response": [
												{
													"name": "No Content",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Not Found",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Gone",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unauthorized",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Unprocessable Entity",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
													"code": 422,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												},
												{
													"name": "Forbidden",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transcoders",
																":transcoder_id",
																"properties",
																":id"
															],
															"variable": [
																{
																	"key": "transcoder_id"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Configure a property for a transcoder",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"property\": {\n        \"section\": \"<string>\",\n        \"key\": \"<string>\",\n        \"value\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":transcoder_id",
												"properties"
											],
											"variable": [
												{
													"key": "transcoder_id",
													"value": "{{transcoderId}}",
													"description": "The unique alphanumeric string that identifies the transcoder."
												}
											]
										},
										"description": "This operation configures a property for a transcoder. For more information see [Set advanced properties with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api)."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"property\": {\n        \"section\": \"rtsp\",\n        \"key\": \"rtpIgnoreProfileLevelId\",\n        \"value\": \"true\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"property\": {\n  \"key\": \"rtpIgnoreProfileLevelId\",\n  \"section\": \"rtsp\",\n  \"value\": true\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"property\": {\n        \"section\": \"rtsp\",\n        \"key\": \"rtpIgnoreProfileLevelId\",\n        \"value\": \"true\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"property\": {\n        \"section\": \"rtsp\",\n        \"key\": \"rtpIgnoreProfileLevelId\",\n        \"value\": \"true\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Fetch a transcoder's properties",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transcoders",
												":transcoder_id",
												"properties"
											],
											"variable": [
												{
													"key": "transcoder_id",
													"value": "{{transcoderId}}",
													"description": "The unique alphanumeric string that identifies the transcoder."
												}
											]
										},
										"description": "This operation shows all of the properties of a specific transcoder."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"properties\": [\n  {\n   \"key\": \"cupertinoProgramDateTimeOffset\",\n   \"section\": \"cupertino\",\n   \"value\": 50\n  },\n  {\n   \"key\": \"rtpIgnoreProfileLevelId\",\n   \"section\": \"rtsp\",\n   \"value\": true\n  }\n ]\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transcoders/:transcoder_id/properties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transcoders",
														":transcoder_id",
														"properties"
													],
													"variable": [
														{
															"key": "transcoder_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create a transcoder",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transcoder\": {\n        \"name\": \"<string>\",\n        \"transcoder_type\": \"<string>\",\n        \"billing_mode\": \"<string>\",\n        \"broadcast_location\": \"<string>\",\n        \"protocol\": \"<string>\",\n        \"delivery_method\": \"<string>\",\n        \"buffer_size\": \"<integer>\",\n        \"closed_caption_type\": \"<string>\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"disable_authentication\": \"<boolean>\",\n        \"idle_timeout\": \"<integer>\",\n        \"low_latency\": \"<boolean>\",\n        \"password\": \"<string>\",\n        \"play_maximum_connections\": \"<integer>\",\n        \"recording\": \"<boolean>\",\n        \"source_url\": \"<string>\",\n        \"stream_extension\": \"<string>\",\n        \"stream_smoother\": \"<boolean>\",\n        \"stream_source_id\": \"<string>\",\n        \"suppress_stream_target_start\": \"<boolean>\",\n        \"username\": \"<string>\",\n        \"watermark\": \"<boolean>\",\n        \"watermark_height\": \"<integer>\",\n        \"watermark_image\": \"<string>\",\n        \"watermark_opacity\": \"<integer>\",\n        \"watermark_position\": \"<string>\",\n        \"watermark_width\": \"<integer>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transcoders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transcoders"
							]
						},
						"description": "This operation creates a transcoder."
					},
					"response": [
						{
							"name": "Unprocessable Entity",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"transcoder_type\": \"transcoded\",\n        \"billing_mode\": \"pay_as_you_go\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transcoders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"transcoder_type\": \"transcoded\",\n        \"billing_mode\": \"pay_as_you_go\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transcoders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transcoder\": {\n        \"name\": \"My PAYG Transcoder\",\n        \"transcoder_type\": \"transcoded\",\n        \"billing_mode\": \"pay_as_you_go\",\n        \"broadcast_location\": \"us_central_iowa\",\n        \"protocol\": \"rtmp\",\n        \"delivery_method\": \"pull\",\n        \"buffer_size\": 4000,\n        \"closed_caption_type\": \"cea\",\n        \"delivery_protocols\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"description\": \"My Transcoder Description\",\n        \"disable_authentication\": false,\n        \"idle_timeout\": 1200,\n        \"low_latency\": false,\n        \"password\": \"82e0e971\",\n        \"play_maximum_connections\": 20,\n        \"recording\": true,\n        \"source_url\": \"cp12345.live.edgefcs.net/live/redcarpet@123456\",\n        \"stream_extension\": \".sdp\",\n        \"stream_smoother\": false,\n        \"stream_source_id\": \"rxHQQpWw\",\n        \"suppress_stream_target_start\": false,\n        \"username\": \"client2\",\n        \"watermark\": true,\n        \"watermark_height\": 80,\n        \"watermark_image\": \"[Base64-encoded string representation of GIF, JPEG, or PNG file]\",\n        \"watermark_opacity\": 75,\n        \"watermark_position\": \"bottom-left\",\n        \"watermark_width\": 100\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transcoders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"transcoder\": {\n  \"application_name\": \"app-3757\",\n  \"billing_mode\": \"pay_as_you_go\",\n  \"broadcast_location\": \"us_central_iowa\",\n  \"buffer_size\": 4000,\n  \"closed_caption_type\": \"cea\",\n  \"created_at\": \"2020-01-25T20:07:15.938Z\",\n  \"delivery_method\": \"push\",\n  \"delivery_protocols\": [\n   \"rtmp\",\n   \"rtsp\",\n   \"wowz\"\n  ],\n  \"description\": \"My Transcoder Description\",\n  \"direct_playback_urls\": [\n   {\n    \"rtmp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtmp://abc123.entrypoint.cloud.wowza.com/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"rtsp\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"rtsp://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   },\n   {\n    \"wowz\": [\n     {\n      \"name\": \"source\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789\"\n     },\n     {\n      \"name\": \"1920x1080\",\n      \"output_id\": \"dcxq5q6c\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream1\"\n     },\n     {\n      \"name\": \"1280x720\",\n      \"output_id\": \"0g116zkf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream2\"\n     },\n     {\n      \"name\": \"854x480\",\n      \"output_id\": \"4qqkwndt\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream3\"\n     },\n     {\n      \"name\": \"640x360\",\n      \"output_id\": \"0pv8djpg\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream4\"\n     },\n     {\n      \"name\": \"512x288\",\n      \"output_id\": \"b09xrxjf\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream5\"\n     },\n     {\n      \"name\": \"320x180\",\n      \"output_id\": \"bvkh2nsz\",\n      \"url\": \"wowz://abc123.entrypoint.cloud.wowza.com:1935/app-51eb/wxyz6789_stream6\"\n     }\n    ]\n   }\n  ],\n  \"disable_authentication\": false,\n  \"domain_name\": \"f92334.entrypoint.cloud.wowza.com\",\n  \"idle_timeout\": 1200,\n  \"low_latency\": false,\n  \"name\": \"My PAYG Transcoder\",\n  \"outputs\": [\n   {}\n  ],\n  \"password\": \"82e0e971\",\n  \"protocol\": \"rtmp\",\n  \"recording\": true,\n  \"source_port\": 1935,\n  \"stream_extension\": \".sdp\",\n  \"stream_name\": \"10eb0ed8\",\n  \"stream_smoother\": false,\n  \"suppress_stream_target_start\": false,\n  \"transcoder_type\": \"transcoded\",\n  \"updated_at\": \"2020-01-28T14:33:52.938Z\",\n  \"username\": \"client2\",\n  \"watermark\": true,\n  \"watermark_height\": 80,\n  \"watermark_image_url\": \"https://prod.s3.amazonaws.com/uploads/transcoder/watermark_image/12345/4baa13.jpg\",\n  \"watermark_opacity\": 75,\n  \"watermark_position\": \"top-right\",\n  \"watermark_width\": 100\n }\n}"
						}
					]
				},
				{
					"name": "Fetch all transcoders",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transcoders?filter={{filter_conditions}}&page={{filter_page}}&per_page={{filter_per_page}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transcoders"
							],
							"query": [
								{
									"key": "filter",
									"value": "{{filter_conditions}}",
									"description": "Restricts the data that gets returned by filtering on one or more values associated with a field. Construct a filter using a two-part expression that specifies the field on which to filter and the logic to use to filter.  \n\n Valid filter fields are **created_at**, **id**, **name**, and **state**.  \n\n Valid filter operators are **eq** (equals), which accepts one value, and **in** (equals any of), which accepts a comma-separated string of values.  \n\n Filters use a zero-based index.  \n\n For example: \n\n  **filter[0][field]=state&filter[0][eq]=stopped**  \n\n For more information and examples, see the technical article [How to get filtered query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-filtered-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "page",
									"value": "{{filter_page}}",
									"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
								},
								{
									"key": "per_page",
									"value": "{{filter_per_page}}",
									"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
								}
							]
						},
						"description": "This operation shows limited details for all of your transcoders. For detailed information, fetch a single transcoder."
					},
					"response": [
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/transcoders?filter=<string>&page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders"
									],
									"query": [
										{
											"key": "filter",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/transcoders?filter=<string>&page=<integer>&per_page=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transcoders"
									],
									"query": [
										{
											"key": "filter",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "per_page",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"transcoders\": [\n  {\n   \"name\": \"My transcoder\",\n   \"workflow\": \"live_stream\",\n   \"created_at\": \"2020-01-25T20:07:15.938Z\",\n   \"updated_at\": \"2020-01-28T12:34:34.938Z\"\n  },\n  {\n   \"name\": \"My other transcoder\",\n   \"workflow\": \"transcoder\",\n   \"created_at\": \"2020-01-25T20:07:15.938Z\",\n   \"updated_at\": \"2020-01-27T21:14:46.938Z\"\n  }\n ]\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "usage",
			"item": [
				{
					"name": "transcoders",
					"item": [
						{
							"name": "Fetch usage for all transcoders",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/transcoders?from={{filter_datetime_from}}&to={{filter_datetime_to}}&transcoder_type={{filter_transcoder_type}}&billing_mode={{filter_billing_mode}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"transcoders"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
										},
										{
											"key": "transcoder_type",
											"value": "{{filter_transcoder_type}}",
											"description": "This parameter is sunset and no longer available."
										},
										{
											"key": "billing_mode",
											"value": "{{filter_billing_mode}}",
											"description": "This parameter is sunset and no longer available."
										}
									]
								},
								"description": "This operation shows the amount of usage (egress) for all transcoders in the account. The default time frame is *from* the last billing date *to* the end of the current day."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoders\": [\n  {\n   \"archived\": false,\n   \"bytes\": 2242042527,\n   \"billing_mode\": \"pay_as_you_go\",\n   \"name\": \"transcoder name\",\n   \"seconds\": 13241234,\n   \"transcoder_type\": \"transcoded\"\n  }\n ],\n \"pagination\": {\n  \"page\": 3,\n  \"page_first_index\": 6,\n  \"page_last_index\": 8,\n  \"per_page\": 3,\n  \"total_pages\": 710,\n  \"total_records\": 2130\n },\n \"limits\": {\n  \"from\": \"2019-10-01T07:00:00.000Z\",\n  \"to\": \"2019-10-16T11:00:00.000Z\"\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch usage for a single transcoder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/transcoders/:id?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"transcoders",
										":id"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{transcoderId}}",
											"description": "The unique alphanumeric string that identifies the transcoder."
										}
									]
								},
								"description": "(Available from version 1.4) This operation shows the amount of usage (egress) for a specific transcoder. The default time frame is *from* the last billing date *to* the end of the current day."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/:id?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												":id"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/:id?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												":id"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoder\": {\n  \"name\": \"transcoder name\",\n  \"archived\": false,\n  \"transcoder_type\": \"transcoded\",\n  \"billing_mode\": \"pay_as_you_go\",\n  \"bytes\": 2242042527,\n  \"seconds\": 1234\n },\n \"limits\": {\n  \"from\": \"2019-10-01T07:00:00.000Z\",\n  \"to\": \"2019-10-16T11:00:00.000Z\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/:id?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												":id"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/:id?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												":id"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/:id?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												":id"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/:id?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												":id"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch transcoder usage summary",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/transcoders/summary?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"transcoders",
										"summary"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
										}
									]
								},
								"description": "(Available from version 1.4) This operation shows a summary of the amount of usage (egress) for all transcoders in the account. The default time frame is *from* the last billing date *to* the end of the current day."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"summary\": {\n  \"bytes\": 3000,\n  \"seconds\": 300,\n  \"configurations\": [\n   {\n    \"transcoder_type\": \"transcoded\",\n    \"billing_mode\": \"pay_as_you_go\",\n    \"bytes\": 1000,\n    \"seconds\": 200\n   },\n   {\n    \"transcoder_type\": \"passthrough\",\n    \"billing_mode\": \"twentyfour_seven\",\n    \"bytes\": 2000,\n    \"seconds\": 100\n   }\n  ]\n },\n \"limits\": {\n  \"from\": \"2019-02-15T00:00:00.000Z\",\n  \"to\": \"2019-09-24T00:00:00.000Z\"\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/transcoders/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"transcoders",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "stream sources (Sunset)",
					"item": [
						{
							"name": "(Sunset) Fetch usage for all stream sources",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/stream_sources?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"stream_sources"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
										}
									]
								},
								"description": "The GET /usage/stream_sources operation is sunset and no longer available in v1.4 and later."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_sources\": [\n  {\n   \"bytes_used\": 4567890,\n   \"deleted\": true,\n   \"name\": \"My Stream Source\"\n  },\n  {\n   \"bytes_used\": 987654,\n   \"deleted\": false,\n   \"name\": \"My Other Stream Source\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "stream targets",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetch stream target usage details",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/:id?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												":id"
											],
											"query": [
												{
													"key": "from",
													"value": "{{filter_datetime_from}}",
													"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
												},
												{
													"key": "to",
													"value": "{{filter_datetime_to}}",
													"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "(Available from version 1.4) This operation returns CDN usage details for a specific stream target. Defaults: from = last billing date, to = end of current day. \n #  \n > **Note:** This operation currently supports stream targets with a *type* of **fastly** only."
									},
									"response": [
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target\": {\n  \"name\": \"My Stream Target\",\n  \"archived\": true,\n  \"type\": \"fastly\",\n  \"unique_viewers\": 17058,\n  \"viewing_time\": 44925498,\n  \"bytes\": 22886,\n  \"zones\": [\n   {\n    \"name\": \"global\",\n    \"type\": \"fastly\",\n    \"bytes\": 22886\n   }\n  ]\n },\n \"limits\": {\n  \"from\": \"2019-11-07T00:00:00.000Z\",\n  \"to\": \"2019-12-05T00:00:00.000Z\"\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Fetch stream target usage by country",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/:id/countries?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												":id",
												"countries"
											],
											"query": [
												{
													"key": "from",
													"value": "{{filter_datetime_from}}",
													"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
												},
												{
													"key": "to",
													"value": "{{filter_datetime_to}}",
													"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "(Available from version 1.4) This operation returns CDN usage details for a specific stream target by country. Defaults: from = last billing date, to = end of current day. \n #  \n > **Note:** This operation currently supports stream targets with a *type* of **fastly** only."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/countries?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"countries"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/countries?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"countries"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/countries?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"countries"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/countries?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"countries"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/countries?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"countries"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"countries\": [\n  {\n   \"code\": \"US\",\n   \"name\": \"United States\",\n   \"unique_viewers\": 1,\n   \"viewing_time\": 222,\n   \"bytes\": 12886,\n   \"zones\": [\n    {\n     \"name\": \"global\",\n     \"type\": \"fastly\",\n     \"bytes\": 12886\n    }\n   ]\n  },\n  {\n   \"code\": \"CA\",\n   \"name\": \"Canada\",\n   \"unique_viewers\": 14,\n   \"viewing_time\": 222,\n   \"bytes\": 22886,\n   \"zones\": [\n    {\n     \"name\": \"global\",\n     \"type\": \"fastly\",\n     \"bytes\": 22886\n    }\n   ]\n  }\n ],\n \"limits\": {\n  \"from\": \"2019-11-07T00:00:00.000Z\",\n  \"to\": \"2019-12-05T00:00:00.000Z\"\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/countries?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"countries"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Fetch stream target usage by rendition",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/:id/renditions?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												":id",
												"renditions"
											],
											"query": [
												{
													"key": "from",
													"value": "{{filter_datetime_from}}",
													"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
												},
												{
													"key": "to",
													"value": "{{filter_datetime_to}}",
													"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "(Available from version 1.4) This operation returns CDN usage details for a specific stream target by output rendition. Defaults: from = last billing date, to = end of current day. \n #  \n > **Note:** This operation currently supports stream targets with a *type* of **fastly** only."
									},
									"response": [
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/renditions?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"renditions"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/renditions?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"renditions"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"renditions\": [\n  {\n   \"name\": \"448\",\n   \"unique_viewers\": 14,\n   \"viewing_time\": 222,\n   \"bytes\": 22886,\n   \"zones\": [\n    {\n     \"name\": \"global\",\n     \"type\": \"fastly\",\n     \"bytes\": 22886\n    }\n   ]\n  },\n  {\n   \"name\": \"640\",\n   \"unique_viewers\": 14,\n   \"viewing_time\": 222,\n   \"bytes\": 22886,\n   \"zones\": [\n    {\n     \"name\": \"global\",\n     \"type\": \"fastly\",\n     \"bytes\": 22886\n    }\n   ]\n  }\n ],\n \"limits\": {\n  \"from\": \"2019-11-07T00:00:00.000Z\",\n  \"to\": \"2019-12-05T00:00:00.000Z\"\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/renditions?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"renditions"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/renditions?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"renditions"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/renditions?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"renditions"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/renditions?from=<dateTime>&to=<dateTime>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"renditions"
													],
													"query": [
														{
															"key": "from",
															"value": "<dateTime>"
														},
														{
															"key": "to",
															"value": "<dateTime>"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								},
								{
									"name": "Fetch stream target live viewer data",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "wsc-access-key",
												"value": "{{WscAccessKey}}",
												"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
												"type": "text"
											},
											{
												"key": "wsc-timestamp",
												"value": "{{epochTimeStamp}}",
												"description": "Unix epoch timestamp.",
												"type": "text"
											},
											{
												"key": "wsc-signature",
												"value": "{{WscSignature}}",
												"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/:id/live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												":id",
												"live"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{streamTargetId}}",
													"description": "The unique alphanumeric string that identifies the stream target."
												}
											]
										},
										"description": "(Available from version 1.4) This operation returns the number of current viewers for a stream via a specific stream target. \n #  \n > **Note:** This operation currently supports stream targets with a *type* of **fastly** only."
									},
									"response": [
										{
											"name": "Gone",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"live"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Gone",
											"code": 410,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"live"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"stream_target\": {\n  \"unique_viewers\": 756058\n }\n}"
										},
										{
											"name": "Unprocessable Entity",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"live"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"live"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"live"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/usage/stream_targets/:id/live",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"usage",
														"stream_targets",
														":id",
														"live"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Fetch stream targets usage details",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/stream_targets?from={{filter_datetime_from}}&to={{filter_datetime_to}}&page={{filter_page}}&per_page={{filter_per_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"stream_targets"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
										},
										{
											"key": "page",
											"value": "{{filter_page}}",
											"description": "Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is **1**. \n\n For more information and examples, see [Get paginated query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api)."
										},
										{
											"key": "per_page",
											"value": "{{filter_per_page}}",
											"description": "For use with the *page* parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is **1000**."
										}
									]
								},
								"description": "(Available from version 1.4) This operation returns detailed CDN usage data for all stream targets in the account. Defaults: from = last billing date, to = end of current day. \n #  \n > **Note:** This operation currently supports stream targets with a *type* of **fastly** only."
							},
							"response": [
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets?from=<dateTime>&to=<dateTime>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets?from=<dateTime>&to=<dateTime>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets?from=<dateTime>&to=<dateTime>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets?from=<dateTime>&to=<dateTime>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_targets\": [\n  {\n   \"name\": \"My Stream Target\",\n   \"archived\": true,\n   \"type\": \"fastly\",\n   \"unique_viewers\": 17058,\n   \"viewing_time\": 44925498,\n   \"bytes\": 22886,\n   \"zones\": [\n    {\n     \"name\": \"global\",\n     \"type\": \"fastly\",\n     \"bytes\": 22886\n    }\n   ]\n  },\n  {\n   \"name\": \"My Other Stream Target\",\n   \"archived\": false,\n   \"type\": \"fastly\",\n   \"unique_viewers\": 84756,\n   \"viewing_time\": 593275043,\n   \"bytes\": 22886,\n   \"zones\": [\n    {\n     \"name\": \"global\",\n     \"type\": \"fastly\",\n     \"bytes\": 22886\n    }\n   ]\n  }\n ],\n \"limits\": {\n  \"from\": \"2019-11-07T00:00:00.000Z\",\n  \"to\": \"2019-12-05T00:00:00.000Z\"\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets?from=<dateTime>&to=<dateTime>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets?from=<dateTime>&to=<dateTime>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "Fetch stream target usage summary",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/stream_targets/summary?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"stream_targets",
										"summary"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **from** query parameter without setting the **to** query parameter, the data returned will reflect 90 days starting at the **from** date, or data up to to the current day, whichever is shorter. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:00:00** where **HH** is a 24-hour clock in UTC. The range doesn't include minutes and seconds and rounds minutes up to the hour. The maximum difference between **from** and **to** is 90 days. If you set the **to** query parameter without setting the **from** query parameter, the data returned will be from the past 90 days or from your last invoice date, whichever is shorter. The *to* default is the end of the current day."
										}
									]
								},
								"description": "(Available from version 1.4) This operation returns a summary of CDN usage for all stream targets in the account. Defaults: from = last billing date, to = end of current day. \n #  \n > **Note:** This operation currently supports stream targets with a *type* of **fastly** only."
							},
							"response": [
								{
									"name": "Gone",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Gone",
									"code": 410,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-RecordInvalid\",\n   \"title\": \"Record Invalid Error\",\n   \"message\": \"The request couldn't be processed. ... can't be blank\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/stream_targets/summary?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"stream_targets",
												"summary"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"summary\": {\n  \"unique_viewers\": 756058,\n  \"viewing_time\": 67925498,\n  \"zones\": [\n   {\n    \"name\": \"global\",\n    \"type\": \"fastly\",\n    \"bytes\": 12886\n   }\n  ]\n },\n \"limits\": {\n  \"from\": \"2019-11-07T00:00:00.000Z\",\n  \"to\": \"2019-12-05T00:00:00.000Z\"\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "network (Sunset)",
					"item": [
						{
							"name": "(Sunset) Fetch network usage for all stream sources",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/network/stream_sources?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"network",
										"stream_sources"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *to* default is the end of the current day."
										}
									]
								},
								"description": "The GET /usage/network/stream_sources operation is sunset and no longer available. To retrieve usage data for a stream source, use GET /usage/stream_sources."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/network/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"network",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"stream_sources\": [\n  {\n   \"bytes_used\": 4567890,\n   \"deleted\": true,\n   \"name\": \"My Stream Source\"\n  },\n  {\n   \"bytes_used\": 987654,\n   \"deleted\": false,\n   \"name\": \"My Other Stream Source\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/network/stream_sources?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"network",
												"stream_sources"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "(Sunset) Fetch network usage for all stream targets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/network/stream_targets?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"network",
										"stream_targets"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *to* default is the end of the current day."
										}
									]
								},
								"description": "The GET /usage/network/stream_targets operation is sunset and no longer available. To retrieve usage data for stream targets, use GET /usage/stream_targets. "
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/network/stream_targets?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"network",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"total\": {\n  \"bytes_used\": 4567890,\n  \"protocols\": {\n   \"ull\": {\n    \"zones\": {\n     \"zone_1\": {\n      \"bytes_used\": 1093617287\n     },\n     \"zone_2\": {\n      \"bytes_used\": 17673242\n     }\n    }\n   },\n   \"hls\": {\n    \"zones\": {\n     \"global\": {\n      \"bytes_used\": 93617287\n     }\n    }\n   },\n   \"hls_hds\": {\n    \"zones\": {\n     \"global\": {\n      \"bytes_used\": 93617287\n     }\n    }\n   }\n  }\n },\n \"stream_targets\": [\n  {\n   \"bytes_billed\": 4567890,\n   \"bytes_used\": 4567890,\n   \"deleted\": true,\n   \"name\": \"My Stream Target\",\n   \"protocols\": {\n    \"hls\": {\n     \"zones\": {\n      \"global\": {\n       \"bytes_used\": 1093617287\n      }\n     }\n    }\n   }\n  },\n  {\n   \"bytes_billed\": 876543,\n   \"bytes_used\": 987654,\n   \"deleted\": false,\n   \"name\": \"My Wowza Ultra Low Latency Stream Target\",\n   \"protocols\": {\n    \"ull\": {\n     \"zones\": {\n      \"zone_1\": {\n       \"bytes_used\": 1093617287\n      },\n      \"zone_2\": {\n       \"bytes_used\": 17673242\n      }\n     }\n    },\n    \"hls\": {\n     \"zones\": {\n      \"global\": {\n       \"bytes_used\": 93617287\n      }\n     }\n    }\n   }\n  },\n  {\n   \"bytes_used\": 987654,\n   \"deleted\": false,\n   \"name\": \"My Other Stream Target\",\n   \"protocols\": {\n    \"hls\": {\n     \"zones\": {\n      \"global\": {\n       \"bytes_used\": 93617287\n      }\n     }\n    }\n   }\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/network/stream_targets?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"network",
												"stream_targets"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								}
							]
						},
						{
							"name": "(Sunset) Fetch network usage for all transcoders",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/network/transcoders?from={{filter_datetime_from}}&to={{filter_datetime_to}}&transcoder_type={{filter_transcoder_type}}&billing_mode={{filter_billing_mode}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"network",
										"transcoders"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *to* default is the end of the current day."
										},
										{
											"key": "transcoder_type",
											"value": "{{filter_transcoder_type}}",
											"description": "This parameter is sunset and no longer available."
										},
										{
											"key": "billing_mode",
											"value": "{{filter_billing_mode}}",
											"description": "This parameter is sunset and no longer available."
										}
									]
								},
								"description": "The GET /usage/network/transcoders operation is sunset and no longer available. To retrieve usage data for a transcoder, use GET /usage/transcoders."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/network/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"network",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/network/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"network",
												"transcoders"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												},
												{
													"key": "transcoder_type",
													"value": "<string>"
												},
												{
													"key": "billing_mode",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"transcoders\": [\n  {\n   \"bytes_used\": 4567890,\n   \"deleted\": true,\n   \"name\": \"My Transcoder\"\n  },\n  {\n   \"bytes_used\": 987654,\n   \"deleted\": false,\n   \"name\": \"My Other Transcoder\"\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "storage",
					"item": [
						{
							"name": "Fetch peak recording storage",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "wsc-access-key",
										"value": "{{WscAccessKey}}",
										"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
										"type": "text"
									},
									{
										"key": "wsc-timestamp",
										"value": "{{epochTimeStamp}}",
										"description": "Unix epoch timestamp.",
										"type": "text"
									},
									{
										"key": "wsc-signature",
										"value": "{{WscSignature}}",
										"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usage/storage/peak?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"storage",
										"peak"
									],
									"query": [
										{
											"key": "from",
											"value": "{{filter_datetime_from}}",
											"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *from* default is the last billing date."
										},
										{
											"key": "to",
											"value": "{{filter_datetime_to}}",
											"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *to* default is the end of the current day."
										}
									]
								},
								"description": "This operation shows the amount of peak recording storage used for the account. The default time frame is *from* the last billing date *to* the end of the current day."
							},
							"response": [
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/storage/peak?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"storage",
												"peak"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
								},
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/usage/storage/peak?from=<dateTime>&to=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"usage",
												"storage",
												"peak"
											],
											"query": [
												{
													"key": "from",
													"value": "<dateTime>"
												},
												{
													"key": "to",
													"value": "<dateTime>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"peak\": {\n  \"recordings\": {\n   \"bytes\": 0\n  }\n },\n \"limits\": {\n  \"from\": \"2019-12-07T00:00:00.000Z\",\n  \"to\": \"2019-12-21T00:00:00.000Z\"\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "(Sunset) Fetch stream processing time",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usage/time/transcoders?from={{filter_datetime_from}}&to={{filter_datetime_to}}&transcoder_type={{filter_transcoder_type}}&billing_mode={{filter_billing_mode}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usage",
								"time",
								"transcoders"
							],
							"query": [
								{
									"key": "from",
									"value": "{{filter_datetime_from}}",
									"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *from* default is the last billing date."
								},
								{
									"key": "to",
									"value": "{{filter_datetime_to}}",
									"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *to* default is the end of the current day."
								},
								{
									"key": "transcoder_type",
									"value": "{{filter_transcoder_type}}",
									"description": "This parameter is sunset and no longer available."
								},
								{
									"key": "billing_mode",
									"value": "{{filter_billing_mode}}",
									"description": "This parameter is sunset and no longer available."
								}
							]
						},
						"description": "The GET /usage/time/transcoders operation is sunset and no longer available in v1.4 and later."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/time/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"time",
										"transcoders"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										},
										{
											"key": "transcoder_type",
											"value": "<string>"
										},
										{
											"key": "billing_mode",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"transcoders\": [\n  {\n   \"deleted\": true,\n   \"name\": \"My Transcoder\",\n   \"seconds_used\": 12345\n  },\n  {\n   \"deleted\": false,\n   \"name\": \"My Other Transcoder\",\n   \"seconds_used\": 4321\n  }\n ]\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/time/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"time",
										"transcoders"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										},
										{
											"key": "transcoder_type",
											"value": "<string>"
										},
										{
											"key": "billing_mode",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/time/transcoders?from=<dateTime>&to=<dateTime>&transcoder_type=<string>&billing_mode=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"time",
										"transcoders"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										},
										{
											"key": "transcoder_type",
											"value": "<string>"
										},
										{
											"key": "billing_mode",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 422,\n   \"code\": \"ERR-422-InvalidTimeFormat\",\n   \"title\": \"Invalid Time Format Error\",\n   \"message\": \"Invalid time format.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						}
					]
				},
				{
					"name": "(Sunset) Fetch viewer data for a stream target",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "wsc-access-key",
								"value": "{{WscAccessKey}}",
								"description": "The access key is also a 64-digit alphanumeric string, however, each user creates their own in the Wowza Streaming Cloud user interface.",
								"type": "text"
							},
							{
								"key": "wsc-timestamp",
								"value": "{{epochTimeStamp}}",
								"description": "Unix epoch timestamp.",
								"type": "text"
							},
							{
								"key": "wsc-signature",
								"value": "{{WscSignature}}",
								"description": "A hex string that is HMAC-encoded with SHA256 digest. Used with the HMAC method of authentication.",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usage/viewer_data/stream_targets/:id?from={{filter_datetime_from}}&to={{filter_datetime_to}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usage",
								"viewer_data",
								"stream_targets",
								":id"
							],
							"query": [
								{
									"key": "from",
									"value": "{{filter_datetime_from}}",
									"description": "The start of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *from* default is the last billing date."
								},
								{
									"key": "to",
									"value": "{{filter_datetime_to}}",
									"description": "The end of the range of time you want to view. Specify **YYYY-MM-DD HH:MM:SS** where **HH** is a 24-hour clock in UTC. The *to* default is the end of the current day."
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{streamTargetId}}",
									"description": "The unique alphanumeric string that identifies the stream target."
								}
							]
						},
						"description": "The GET /usage/viewer_data/stream_targets/{*id*} operation is sunset and no longer available. To retrieve viewer data for a stream target, use GET /usage/stream_targets/{*id*}."
					},
					"response": [
						{
							"name": "Gone",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/viewer_data/stream_targets/:id?from=<dateTime>&to=<dateTime>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"viewer_data",
										"stream_targets",
										":id"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Gone",
							"code": 410,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 410,\n   \"code\": \"ERR-410-RecordDeleted\",\n   \"title\": \"Record Deleted Error\",\n   \"message\": \"The requested resource has been deleted.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/viewer_data/stream_targets/:id?from=<dateTime>&to=<dateTime>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"viewer_data",
										"stream_targets",
										":id"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoApiKey\",\n   \"title\": \"No API Key Error\",\n   \"message\": \"No API key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 2\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-NoAccessKey\",\n   \"title\": \"No Access Key Error\",\n   \"message\": \"No access key sent in header.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 3\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidApiKey\",\n   \"title\": \"Invalid Api Key Error\",\n   \"message\": \"Invalid API key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 4\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-InvalidAccessKey\",\n   \"title\": \"Invalid Access Key Error\",\n   \"message\": \"Invalid access key.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 5\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-BadAccountStatus\",\n   \"title\": \"Bad Account Status Error\",\n   \"message\": \"Your account's status doesn't allow this action.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 6\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-FeatureNotEnabled\",\n   \"title\": \"Feature Not Enabled Error\",\n   \"message\": \"This feature isn't enabled.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n },\n \"Example Response 7\": {\n  \"meta\": {\n   \"status\": 401,\n   \"code\": \"ERR-401-TrialExceeded\",\n   \"title\": \"Bad Billing Status Error\",\n   \"message\": \"Your billing status needs attention. You can't start or add live streams until your billing status is updated.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/viewer_data/stream_targets/:id?from=<dateTime>&to=<dateTime>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"viewer_data",
										"stream_targets",
										":id"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"stream_target\": {\n  \"countries\": [\n   {\n    \"US\": {\n     \"name\": \"United States of America\",\n     \"...\": \"...\",\n     \"protocols\": [\n      {\n       \"hds\": {\n        \"name\": \"Adobe HDS\",\n        \"...\": \"...\"\n       }\n      },\n      {\n       \"hls\": {\n        \"name\": \"Apple HLS\",\n        \"...\": \"...\"\n       }\n      },\n      {\n       \"rtmp\": {\n        \"name\": \"RTMP\",\n        \"...\": \"...\"\n       }\n      }\n     ]\n    }\n   },\n   {\n    \"CA\": {\n     \"name\": \"Canada\",\n     \"...\": \"...\"\n    }\n   }\n  ],\n  \"country_list\": [\n   \"AU\",\n   \"CA\",\n   \"CH\",\n   \"CZ\",\n   \"DE\",\n   \"FI\",\n   \"GB\",\n   \"IE\",\n   \"IL\",\n   \"IN\",\n   \"MX\",\n   \"PL\",\n   \"SE\",\n   \"US\"\n  ],\n  \"percentage_viewers\": 100,\n  \"percentage_viewing_time\": 100,\n  \"protocols\": [\n   {\n    \"hds\": {\n     \"name\": \"Adobe HDS\",\n     \"percentage_viewers\": 39,\n     \"percentage_viewing_time\": 55,\n     \"seconds_avg_viewing_time\": 3689.7337516808607,\n     \"seconds_total_viewing_time\": 24695388,\n     \"total_unique_viewers\": 6693\n    }\n   },\n   {\n    \"hls\": {\n     \"name\": \"Apple HLS\",\n     \"percentage_viewers\": 67,\n     \"percentage_viewing_time\": 45,\n     \"seconds_avg_viewing_time\": 1775.0381679389313,\n     \"seconds_total_viewing_time\": 20230110,\n     \"total_unique_viewers\": 11397\n    }\n   },\n   {\n    \"rtmp\": {\n     \"name\": \"RTMP\",\n     \"percentage_viewers\": 0,\n     \"percentage_viewing_time\": 0,\n     \"seconds_avg_viewing_time\": 0,\n     \"seconds_total_viewing_time\": 0,\n     \"total_unique_viewers\": 0\n    }\n   }\n  ],\n  \"rendition_list\": [\n   4128,\n   2728,\n   1728,\n   1152,\n   640,\n   448\n  ],\n  \"renditions\": [\n   {\n    \"448\": {\n     \"countries\": [\n      {\n       \"US\": {\n        \"name\": \"United States of America\",\n        \"...\": \"...\"\n       }\n      }\n     ],\n     \"percentage_viewers\": 100,\n     \"percentage_viewing_time\": 100,\n     \"protocols\": [\n      {\n       \"hds\": {\n        \"name\": \"Adobe HDS\",\n        \"...\": \"...\"\n       }\n      },\n      {\n       \"hls\": {\n        \"name\": \"Apple HLS\",\n        \"...\": \"...\"\n       }\n      },\n      {\n       \"rtmp\": {\n        \"name\": \"RTMP\",\n        \"...\": \"...\"\n       }\n      }\n     ],\n     \"seconds_avg_viewing_time\": 387.3736449048422,\n     \"seconds_total_viewing_time\": 4823964,\n     \"total_unique_viewers\": 12453\n    }\n   },\n   {\n    \"640\": {\n     \"...\": \"...\"\n    }\n   }\n  ],\n  \"seconds_avg_viewing_time\": 2633.690819556806,\n  \"seconds_total_viewing_time\": 44925498,\n  \"total_unique_viewers\": 17058\n }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/viewer_data/stream_targets/:id?from=<dateTime>&to=<dateTime>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"viewer_data",
										"stream_targets",
										":id"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 403,\n   \"code\": \"ERR-403-RecordUnaccessible\",\n   \"title\": \"Record Unaccessible Error\",\n   \"message\": \"The requested resource isn't accessible.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/usage/viewer_data/stream_targets/:id?from=<dateTime>&to=<dateTime>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usage",
										"viewer_data",
										"stream_targets",
										":id"
									],
									"query": [
										{
											"key": "from",
											"value": "<dateTime>"
										},
										{
											"key": "to",
											"value": "<dateTime>"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"Example Response 1\": {\n  \"meta\": {\n   \"status\": 404,\n   \"code\": \"ERR-404-RecordNotFound\",\n   \"title\": \"Record Not Found Error\",\n   \"message\": \"The requested resource couldn't be found.\",\n   \"description\": \"\",\n   \"links\": []\n  }\n }\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6d4feb99-9bc6-4b40-a373-37ae4f2bf7a3",
				"type": "text/javascript",
				"exec": [
					"var timestamp = Math.floor(Date.now() / 1000);",
					"pm.environment.set(\"epochTimeStamp\", timestamp);",
					"var apiKey = environment.WscApiKey;",
					"",
					"var url = request.url;",
					"url = replaceVariables(url);",
					"console.log(\"Request URL: \" + url);",
					"",
					"var index = url.indexOf(\"/api/\");",
					"var lastIndex = url.indexOf('?');",
					"var uri_path = url.substring(index);",
					"if (lastIndex > 0) { uri_path = url.substring(index, lastIndex); }",
					"var payload = timestamp + \":\" + uri_path + \":\" + apiKey;",
					"console.log(\"Payload: \" + payload);",
					"var hmac = CryptoJS.HmacSHA256(payload, apiKey).toString(CryptoJS.enc.Hex)",
					"pm.environment.set(\"WscSignature\", hmac);",
					"",
					"function replaceVariables(templateString) {",
					"    let tokens = _.uniq(templateString.match(/{{\\w*}}/g))",
					"    ",
					"    _.forEach(tokens, t => {",
					"       let variable = t.replace(/[{}]/g, '') ",
					"       let value = environment[variable] || globals[variable]",
					"       templateString = templateString.replace(new RegExp(t,'g'), value)",
					"    });",
					"    ",
					"    return templateString",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6e37fd7e-01a8-4d8a-9bd2-296562a6908d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "5fb1bfdd-5e74-4a36-a0c3-370c90503539",
			"key": "baseUrl",
			"value": "https://api-sandbox.cloud.wowza.com/api/beta",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}